<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Centos—更换国内yum源</title>
      <link href="/2020/03/10/Centos-%E6%9B%B4%E6%8D%A2%E5%9B%BD%E5%86%85yum%E6%BA%90/"/>
      <url>/2020/03/10/Centos-%E6%9B%B4%E6%8D%A2%E5%9B%BD%E5%86%85yum%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>redhat 的更新包只对注册的用户生效，所以我们自己手动更改成CentOS 的更新包，CentOS几乎和redhat是一样的，所以无需担心软件包是否可安装，安装之后是否有问题。</p><h2 id="检查是否安装yum包"><a href="#检查是否安装yum包" class="headerlink" title="检查是否安装yum包"></a>检查是否安装yum包</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@elasticsearch-04 ~]# rpm -qa |grep yum</span><br><span class="line">yum-metadata-parser-1.1.4-10.el7.x86_64</span><br><span class="line">yum-3.4.3-161.el7.centos.noarch</span><br><span class="line">yum-plugin-fastestmirror-1.1.31-50.el7.noarch</span><br></pre></td></tr></table></figure><h2 id="删除redhat自带的yum包"><a href="#删除redhat自带的yum包" class="headerlink" title="删除redhat自带的yum包"></a>删除redhat自带的yum包</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@elasticsearch-04 ~]# rpm -qa|grep yum|xargs rpm -e --nodeps</span><br></pre></td></tr></table></figure><h2 id="下载yum-安装包（我这里下载的是163的）"><a href="#下载yum-安装包（我这里下载的是163的）" class="headerlink" title="下载yum 安装包（我这里下载的是163的）"></a>下载yum 安装包（我这里下载的是163的）</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@elasticsearch-04 ~]# cd /opt</span><br><span class="line">[root@elasticsearch-04 opt]# wget http://mirrors.163.com/centos/7/os/x86_64/Packages/python-iniparse-0.4-9.el7.noarch.rpm</span><br><span class="line">[root@elasticsearch-04 opt]# wget http://mirrors.163.com/centos/7/os/x86_64/Packages/python-urlgrabber-3.10-9.el7.noarch.rpm</span><br><span class="line">[root@elasticsearch-04 opt]# wget http://mirrors.163.com/centos/7/os/x86_64/Packages/yum-metadata-parser-1.1.4-10.el7.x86_64.rpm</span><br><span class="line">[root@elasticsearch-04 opt]# wget http://mirrors.163.com/centos/7/os/x86_64/Packages/yum-plugin-fastestmirror-1.1.31-52.el7.noarch.rpm</span><br></pre></td></tr></table></figure><h2 id="安装yum"><a href="#安装yum" class="headerlink" title="安装yum"></a>安装yum</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@elasticsearch-04 opt]# rpm -ivh *.rpm</span><br><span class="line">准备中...                          ################################# [100%]</span><br><span class="line">软件包 python-urlgrabber-3.10-9.el7.noarch 已经安装</span><br><span class="line">软件包 python-iniparse-0.4-9.el7.noarch 已经安装</span><br><span class="line">[root@elasticsearch-04 opt]# rpm -ivh --force *.rpm</span><br><span class="line">--force 即使覆盖属于其它包的文件也强迫安装</span><br><span class="line">--nodeps 如果该RPM包的安装依赖其它包，即使其它包没装，也强迫安装。</span><br><span class="line">准备中...                          ################################# [100%]</span><br><span class="line">正在升级/安装...</span><br><span class="line">   1:yum-metadata-parser-1.1.4-10.el7 ################################# [ 20%]</span><br><span class="line">   2:python-urlgrabber-3.10-9.el7     ################################# [ 40%]</span><br><span class="line">   3:python-iniparse-0.4-9.el7        ################################# [ 60%]</span><br><span class="line">   4:yum-plugin-fastestmirror-1.1.31-5################################# [ 80%]</span><br><span class="line">   5:yum-3.4.3-163.el7.centos         ################################# [100%]</span><br></pre></td></tr></table></figure><h2 id="更改yum库的地址-这里使用我们国内自己的yum库"><a href="#更改yum库的地址-这里使用我们国内自己的yum库" class="headerlink" title="更改yum库的地址,这里使用我们国内自己的yum库"></a>更改yum库的地址,这里使用我们国内自己的yum库</h2><p>由于网易的CentOS镜像源好多包不能安装，我这里使用的是阿里云的。阿里云Linux安装镜像源地址：<a href="http://mirrors.aliyun.com/" target="_blank" rel="noopener">http://mirrors.aliyun.com/</a></p><h3 id="备份你的原镜像文件，以免出错后可以恢复。"><a href="#备份你的原镜像文件，以免出错后可以恢复。" class="headerlink" title="备份你的原镜像文件，以免出错后可以恢复。"></a>备份你的原镜像文件，以免出错后可以恢复。</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@elasticsearch-04 opt]# mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br></pre></td></tr></table></figure><h3 id="下载新的CentOS-Base-repo-到-etc-yum-repos-d"><a href="#下载新的CentOS-Base-repo-到-etc-yum-repos-d" class="headerlink" title="下载新的CentOS-Base.repo 到/etc/yum.repos.d/"></a>下载新的CentOS-Base.repo 到/etc/yum.repos.d/</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@elasticsearch-04 opt]# cd /etc/yum.repos.d/</span><br><span class="line">[root@elasticsearch-04 yum.repos.d]# ls</span><br><span class="line">CentOS-Base.repo</span><br><span class="line">[root@elasticsearch-04 yum.repos.d]# wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo</span><br></pre></td></tr></table></figure><h3 id="更改CentOS-Media-repo使其为不生效"><a href="#更改CentOS-Media-repo使其为不生效" class="headerlink" title="更改CentOS-Media.repo使其为不生效"></a>更改CentOS-Media.repo使其为不生效</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@elasticsearch-04 yum.repos.d]# vim CentOS-Base.repo </span><br><span class="line">enabled=0</span><br></pre></td></tr></table></figure><h3 id="运行yum-makecache生成缓存"><a href="#运行yum-makecache生成缓存" class="headerlink" title="运行yum makecache生成缓存"></a>运行yum makecache生成缓存</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@elasticsearch-04 yum.repos.d]# yum clean all</span><br><span class="line">[root@elasticsearch-04 yum.repos.d]# yum makecache</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux_application </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux_application </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker—nextcloud搭建私有同步网盘</title>
      <link href="/2020/03/09/docker-nextcloud%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89%E5%90%8C%E6%AD%A5%E7%BD%91%E7%9B%98/"/>
      <url>/2020/03/09/docker-nextcloud%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89%E5%90%8C%E6%AD%A5%E7%BD%91%E7%9B%98/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>nextcloud</code>是一款开源私有云方案，GitHub开源地址：<a href="https://github.com/nextcloud，也就是说，可以用`nextcloud`来搭建私有同步网盘。" target="_blank" rel="noopener">https://github.com/nextcloud，也就是说，可以用`nextcloud`来搭建私有同步网盘。</a></p><p>之前就有搭建私有网盘的需求，毕竟国外网盘容量小，速度慢，国内目前也就只有115和百度云在苟延残喘，115已是半残，百度云限速不说，还会将小姐姐变成8秒教育片，先不论这种偷窥个人网盘隐私的行为是否违法，要知道百度云删除这些东西的时候可没有告知用户，更不用说任何的提醒和交流了，把资料，特别是涉及个人隐私的资料放在百度云实在是放心不下。</p><p>总的来看目前公有网盘大都不能满足需求，也就催生了一大批开源私有网盘，<code>nextcloud</code>就是其中之一。</p><h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><ul><li>cenntos 7</li><li>2G内存, 2M带宽(带宽越大, 同步越流畅)</li></ul><h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@elasticsearch-04 ~]# yum -y install docker</span><br><span class="line">[root@elasticsearch-04 ~]# systemctl start docker</span><br><span class="line">[root@elasticsearch-04 ~]# systemctl enable docker</span><br></pre></td></tr></table></figure><h2 id="获取nextcloud镜像-完成网盘搭建-结束🔚"><a href="#获取nextcloud镜像-完成网盘搭建-结束🔚" class="headerlink" title="获取nextcloud镜像, 完成网盘搭建(结束🔚)"></a>获取nextcloud镜像, 完成网盘搭建(结束🔚)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@elasticsearch-04 html]# docker run -d -p 8080:80 nextcloud</span><br></pre></td></tr></table></figure><h2 id="访问主机ip的8080端口-为网盘设置管理员名称和密码"><a href="#访问主机ip的8080端口-为网盘设置管理员名称和密码" class="headerlink" title="访问主机ip的8080端口,为网盘设置管理员名称和密码"></a>访问主机ip的8080端口,为网盘设置管理员名称和密码</h2><p>比如我的vps主机ip为<code>172.17.120.14</code>, 那么我访问的就是<code>172.17.120.14:8080</code></p><p><img src="01.png" alt="docker-nextcloud搭建私有同步网盘"></p><h2 id="进入网盘后-可以获取全平台的客户端"><a href="#进入网盘后-可以获取全平台的客户端" class="headerlink" title="进入网盘后, 可以获取全平台的客户端"></a>进入网盘后, 可以获取全平台的客户端</h2><p><img src="02.png" alt="docker-nextcloud搭建私有同步网盘"></p><blockquote><ul><li>至此网盘已经搭建完成！</li></ul></blockquote><h2 id="自由存取文件"><a href="#自由存取文件" class="headerlink" title="自由存取文件"></a>自由存取文件</h2><p>可以通过客户端上传图片, 也可以直接拖拽上传</p><p><img src="03.png" alt="docker-nextcloud搭建私有同步网盘"></p><p><img src="04.png" alt="docker-nextcloud搭建私有同步网盘"></p><h2 id="把文件分享给好友"><a href="#把文件分享给好友" class="headerlink" title="把文件分享给好友"></a>把文件分享给好友</h2><p><img src="05.png" alt="docker-nextcloud搭建私有同步网盘"></p><h2 id="实现同步盘的功能-用webdrive连接"><a href="#实现同步盘的功能-用webdrive连接" class="headerlink" title="实现同步盘的功能(用webdrive连接)"></a>实现同步盘的功能(用webdrive连接)</h2><h3 id="点击右下角设置"><a href="#点击右下角设置" class="headerlink" title="点击右下角设置"></a>点击右下角设置</h3><p><img src="06.png" alt="docker-nextcloud搭建私有同步网盘"></p><h3 id="获取webdav地址"><a href="#获取webdav地址" class="headerlink" title="获取webdav地址"></a>获取webdav地址</h3><p><img src="07.png" alt="docker-nextcloud搭建私有同步网盘"></p><h3 id="mac直接挂载"><a href="#mac直接挂载" class="headerlink" title="mac直接挂载"></a>mac直接挂载</h3><p><img src="08.png" alt="docker-nextcloud搭建私有同步网盘"></p><h3 id="连接服务器"><a href="#连接服务器" class="headerlink" title="连接服务器"></a>连接服务器</h3><p><img src="09.png" alt="docker-nextcloud搭建私有同步网盘"></p><h3 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h3><p><img src="010.png" alt="docker-nextcloud搭建私有同步网盘"></p><h3 id="挂载成功"><a href="#挂载成功" class="headerlink" title="挂载成功"></a>挂载成功</h3><p><img src="011.png" alt="docker-nextcloud搭建私有同步网盘"></p><h2 id="客户端连接。transmit支持webdav协议-可以让我们在网络状况很差的情况下-也能进行稳定同步"><a href="#客户端连接。transmit支持webdav协议-可以让我们在网络状况很差的情况下-也能进行稳定同步" class="headerlink" title="客户端连接。transmit支持webdav协议, 可以让我们在网络状况很差的情况下,也能进行稳定同步"></a>客户端连接。transmit支持webdav协议, 可以让我们在网络状况很差的情况下,也能进行稳定同步</h2><p><img src="012.png" alt="docker-nextcloud搭建私有同步网盘"></p><h2 id="手机连接"><a href="#手机连接" class="headerlink" title="手机连接"></a>手机连接</h2><h3 id="输入管理员账户和密码"><a href="#输入管理员账户和密码" class="headerlink" title="输入管理员账户和密码"></a>输入管理员账户和密码</h3><p><img src="013.png" alt="docker-nextcloud搭建私有同步网盘"></p><p><img src="014.png" alt="docker-nextcloud搭建私有同步网盘"></p><h3 id="输入管理员账号密码"><a href="#输入管理员账号密码" class="headerlink" title="输入管理员账号密码"></a>输入管理员账号密码</h3><p><img src="015.png" alt="docker-nextcloud搭建私有同步网盘"></p><h3 id="可以看到刚刚在浏览器上传的图片"><a href="#可以看到刚刚在浏览器上传的图片" class="headerlink" title="可以看到刚刚在浏览器上传的图片"></a>可以看到刚刚在浏览器上传的图片</h3><p><img src="016.png" alt="docker-nextcloud搭建私有同步网盘"></p><h3 id="手机上传图片"><a href="#手机上传图片" class="headerlink" title="手机上传图片"></a>手机上传图片</h3><p><img src="017.png" alt="docker-nextcloud搭建私有同步网盘"></p><h3 id="pc可以查看手机上传的图片"><a href="#pc可以查看手机上传的图片" class="headerlink" title="pc可以查看手机上传的图片"></a>pc可以查看手机上传的图片</h3><p><img src="018.png" alt="docker-nextcloud搭建私有同步网盘"></p><h2 id="记笔记"><a href="#记笔记" class="headerlink" title="记笔记"></a>记笔记</h2><p><img src="023.png" alt="docker-nextcloud搭建私有同步网盘"></p><h2 id="探索插件"><a href="#探索插件" class="headerlink" title="探索插件"></a>探索插件</h2><p>点击页面右上角齿轮图标, 可以安装插件</p><p><img src="019.png" alt="docker-nextcloud搭建私有同步网盘"></p><p><img src="020.png" alt="docker-nextcloud搭建私有同步网盘"></p><p><img src="021.png" alt="docker-nextcloud搭建私有同步网盘"></p><p><img src="022.png" alt="docker-nextcloud搭建私有同步网盘"></p>]]></content>
      
      
      <categories>
          
          <category> Linux_docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux_docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python-日志处理</title>
      <link href="/2020/03/09/python-%E6%97%A5%E5%BF%97%E5%A4%84%E7%90%86/"/>
      <url>/2020/03/09/python-%E6%97%A5%E5%BF%97%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>日志是一种可以追踪某些软件运行时所发生事件的方法。软件开发人员可以向他们的代码中调用日志记录相关的方法来表明发生了某些事情。一个事件可以用一个可包含可选变量数据的消息来描述。此外，事件也有重要性的概念，这个重要性也可以被称为严重性级别（level）。</p><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>通过log的分析，可以方便用户了解系统或软件、应用的运行情况；如果你的应用log足够丰富，也可以分析以往用户的操作行为、类型喜好、地域分布或其他更多信息；如果一个应用的log同时也分了多个级别，那么可以很轻易地分析得到该应用的健康状况，及时发现问题并快速定位、解决问题，补救损失。<br>简单来讲就是，我们通过记录和分析日志可以了解一个系统或软件程序运行情况是否正常，也可以在应用程序出现故障时快速定位问题。比如，做运维的同学，在接收到报警或各种问题反馈后，进行问题排查时通常都会先去看各种日志，大部分问题都可以在日志中找到答案。再比如，做开发的同学，可以通过IDE控制台上输出的各种日志进行程序调试。对于运维老司机或者有经验的开发人员，可以快速的通过日志定位到问题的根源。可见，日志的重要性不可小觑。日志的作用可以简单总结为以下3点：</p><ul><li>程序调试</li><li>了解软件程序运行情况，是否正常</li><li>软件程序运行故障分析与问题定位</li></ul><p>如果应用的日志信息足够详细和丰富，还可以用来做用户行为分析，如：分析用户的操作行为、类型洗好、地域分布以及其它更多的信息，由此可以实现改进业务、提高商业利益。</p><h2 id="Logging工作流程"><a href="#Logging工作流程" class="headerlink" title="Logging工作流程"></a>Logging工作流程</h2><h3 id="logging模块使用过程"><a href="#logging模块使用过程" class="headerlink" title="logging模块使用过程"></a>logging模块使用过程</h3><p>1.第一次导入logging模块或使用reload函数重新导入logging模块，logging模块中的代码将被执行，这个过程中将产生logging日志系统的默认配置。</p><p>2.自定义配置(可选)。logging标准模块支持三种配置方式: dictConfig，fileConfig，listen。其中，dictConfig是通过一个字典进行配置Logger，Handler，Filter，Formatter；fileConfig则是通过一个文件进行配置；而listen则监听一个网络端口，通过接收网络数据来进行配置。当然，除了以上集体化配置外，也可以直接调用Logger，Handler等对象中的方法在代码中来显式配置。</p><p>3.使用logging模块的全局作用域中的getLogger函数来得到一个Logger对象实例(其参数即是一个字符串，表示Logger对象实例的名字，即通过该名字来得到相应的Logger对象实例)。</p><p>4.使用Logger对象中的debug，info，error，warn，critical等方法记录日志信息。</p><h3 id="logging模块处理流程"><a href="#logging模块处理流程" class="headerlink" title="logging模块处理流程"></a>logging模块处理流程</h3><p><img src="/Users/huqi/Desktop/屏幕快照 2020-02-28 下午9.41.12.png" alt="屏幕快照 2020-02-28 下午9.41.12"></p><p>1.判断日志的等级是否大于Logger对象的等级，如果大于，则往下执行，否则，流程结束。</p><p>2.产生日志。第一步，判断是否有异常，如果有，则添加异常信息。第二步，处理日志记录方法(如debug，info等)中的占位符，即一般的字符串格式化处理。</p><p>3.使用注册到Logger对象中的Filters进行过滤。如果有多个过滤器，则依次过滤；只要有一个过滤器返回假，则过滤结束，且该日志信息将丢弃，不再处理，而处理流程也至此结束。否则，处理流程往下执行。</p><p>4.在当前Logger对象中查找Handlers，如果找不到任何Handler，则往上到该Logger对象的父Logger中查找；如果找到一个或多个Handler，则依次用Handler来处理日志信息。但在每个Handler处理日志信息过程中，会首先判断日志信息的等级是否大于该Handler的等级，如果大于，则往下执行(由Logger对象进入Handler对象中)，否则，处理流程结束。</p><p>5.执行Handler对象中的filter方法，该方法会依次执行注册到该Handler对象中的Filter。如果有一个Filter判断该日志信息为假，则此后的所有Filter都不再执行，而直接将该日志信息丢弃，处理流程结束。</p><p>6.使用Formatter类格式化最终的输出结果。 注：Formatter同上述第2步的字符串格式化不同，它会添加额外的信息，比如日志产生的时间，产生日志的源代码所在的源文件的路径等等。</p><p>7.真正地输出日志信息(到网络，文件，终端，邮件等)。至于输出到哪个目的地，由Handler的种类来决定。</p><h2 id="日志等级"><a href="#日志等级" class="headerlink" title="日志等级"></a>日志等级</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">级别          日志函数                 描述</span><br><span class="line">DEBUG     logging.debug()     最低级别，追踪问题时使用</span><br><span class="line">INFO      logging.info()      记录程序中一般事件的信息，或确认一切工作正常</span><br><span class="line">WARNING    logging.warning()    记录信息，用于警告</span><br><span class="line">ERROR      logging.error()      用于记录程序报错信息</span><br><span class="line">CRITICAL  logging.critical()  最高级别，记录可能导致程序崩溃的错误</span><br></pre></td></tr></table></figure><h2 id="日志格式允许的字段"><a href="#日志格式允许的字段" class="headerlink" title="日志格式允许的字段"></a>日志格式允许的字段</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">    格式                            描述</span><br><span class="line">%(levelno)s                   打印日志级别的数值</span><br><span class="line">%(levelname)s                  打印日志级别名称</span><br><span class="line">%(pathname)s                  打印当前执行程序的路径</span><br><span class="line">%(filename)s                  打印当前执行程序名称</span><br><span class="line">%(funcName)s                  打印日志的当前函数</span><br><span class="line">%(lineno)d                    打印日志的当前行号</span><br><span class="line">%(asctime)s                    打印日志的时间</span><br><span class="line">%(thread)d                    打印线程id</span><br><span class="line">%(threadName)s                打印线程名称</span><br><span class="line">%(process)d                    打印进程ID</span><br><span class="line">%(message)s                    打印日志信息</span><br></pre></td></tr></table></figure><h2 id="简单应用"><a href="#简单应用" class="headerlink" title="简单应用"></a>简单应用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logging.debug(<span class="string">'debug message'</span>)</span><br><span class="line">logging.info(<span class="string">'info message'</span>)</span><br><span class="line">logging.warning(<span class="string">'warning message'</span>)</span><br><span class="line">logging.error(<span class="string">'error message'</span>)</span><br><span class="line">logging.critical(<span class="string">'critical message'</span>)</span><br><span class="line">----------------------------------------------------------------------------------------</span><br><span class="line">WARNING:root:warning message</span><br><span class="line">ERROR:root:error message</span><br><span class="line">CRITICAL:root:critical message</span><br></pre></td></tr></table></figure><p>可见，默认情况下<a href="http://lib.csdn.net/base/11" target="_blank" rel="noopener">Python</a>的logging模块将日志打印到了标准输出中，且只显示了大于等于WARNING级别的日志，这说明默认的日志级别设置为WARNING（日志级别等级CRITICAL &gt; ERROR &gt; WARNING &gt; INFO &gt; DEBUG &gt; NOTSET）</p><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ! /usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*</span></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> logging.handlers</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置日志格式</span></span><br><span class="line">fmt = <span class="string">'%(asctime)s %(levename)7.7s %(funcName)s: %(message)s'</span></span><br><span class="line">formatter = logging.Formatter(fmt, datefmt=<span class="string">"%Y-%m-%d %H:%M:%S"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置 handler</span></span><br><span class="line">handler = logging.handlers.TimedRotatingFileHandler(<span class="string">'myapp.log'</span>,when=<span class="string">'D'</span>,backupCount=<span class="number">30</span>)</span><br><span class="line">handler.setFormatter(formatter)</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义 logger对象</span></span><br><span class="line">logger = logging.getLogger(<span class="string">"MyApp"</span>)</span><br><span class="line">logger.addHandler(handler)</span><br><span class="line">logger.setLevel(logging.INFO)</span><br></pre></td></tr></table></figure><h2 id="灵活配置日志格式（多次运行会被覆盖）"><a href="#灵活配置日志格式（多次运行会被覆盖）" class="headerlink" title="灵活配置日志格式（多次运行会被覆盖）"></a>灵活配置日志格式（多次运行会被覆盖）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logging.basicConfig(level=logging.DEBUG,</span><br><span class="line">                    format=<span class="string">'%(asctime)s %(filename)s[line:%(lineno)d] %(levelname)s %(message)s'</span>,</span><br><span class="line">                    datefmt=<span class="string">'%a, %d %b %Y %H:%M:%S'</span>,</span><br><span class="line">                    filename=<span class="string">'/root/log/test.log'</span>,</span><br><span class="line">                    filemode=<span class="string">'w'</span>)</span><br><span class="line"></span><br><span class="line">logging.debug(<span class="string">'debug message'</span>)</span><br><span class="line">logging.info(<span class="string">'info message'</span>)</span><br><span class="line">logging.warning(<span class="string">'warning message'</span>)</span><br><span class="line">logging.error(<span class="string">'error message'</span>)</span><br><span class="line">logging.critical(<span class="string">'critical message'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@RedHat_test log]<span class="comment"># cat test.log </span></span><br><span class="line">Tue, <span class="number">25</span> Feb <span class="number">2020</span> <span class="number">14</span>:<span class="number">17</span>:<span class="number">41</span> <span class="number">2.</span>py[line:<span class="number">8</span>] DEBUG debug message</span><br><span class="line">Tue, <span class="number">25</span> Feb <span class="number">2020</span> <span class="number">14</span>:<span class="number">17</span>:<span class="number">41</span> <span class="number">2.</span>py[line:<span class="number">9</span>] INFO info message</span><br><span class="line">Tue, <span class="number">25</span> Feb <span class="number">2020</span> <span class="number">14</span>:<span class="number">17</span>:<span class="number">41</span> <span class="number">2.</span>py[line:<span class="number">10</span>] WARNING warning message</span><br><span class="line">Tue, <span class="number">25</span> Feb <span class="number">2020</span> <span class="number">14</span>:<span class="number">17</span>:<span class="number">41</span> <span class="number">2.</span>py[line:<span class="number">11</span>] ERROR error message</span><br><span class="line">Tue, <span class="number">25</span> Feb <span class="number">2020</span> <span class="number">14</span>:<span class="number">17</span>:<span class="number">41</span> <span class="number">2.</span>py[line:<span class="number">12</span>] CRITICAL critical message</span><br></pre></td></tr></table></figure><h2 id="logging库Formatter组件"><a href="#logging库Formatter组件" class="headerlink" title="logging库Formatter组件"></a>logging库Formatter组件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">logger = logging.getLogger()</span><br><span class="line"><span class="comment"># 创建一个handler，用于写入日志文件</span></span><br><span class="line">fh = logging.FileHandler(<span class="string">'test.log'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再创建一个handler，用于输出到控制台</span></span><br><span class="line">ch = logging.StreamHandler()</span><br><span class="line"></span><br><span class="line">formatter = logging.Formatter(<span class="string">'%(asctime)s - %(name)s - %(levelname)s - %(message)s'</span>)</span><br><span class="line"></span><br><span class="line">fh.setFormatter(formatter)</span><br><span class="line">ch.setFormatter(formatter)</span><br><span class="line"></span><br><span class="line">logger.addHandler(fh) <span class="comment">#logger对象可以添加多个fh和ch对象</span></span><br><span class="line">logger.addHandler(ch)</span><br><span class="line"></span><br><span class="line">logger.debug(<span class="string">'logger debug message'</span>)</span><br><span class="line">logger.info(<span class="string">'logger info message'</span>)</span><br><span class="line">logger.warning(<span class="string">'logger warning message'</span>)</span><br><span class="line">logger.error(<span class="string">'logger error message'</span>)</span><br><span class="line">logger.critical(<span class="string">'logger critical message'</span>)</span><br><span class="line">----------------------------------------------------------------------------------------</span><br><span class="line"><span class="number">2020</span><span class="number">-02</span><span class="number">-25</span> <span class="number">14</span>:<span class="number">33</span>:<span class="number">10</span>,<span class="number">717</span> - root - WARNING - logger warning message</span><br><span class="line"><span class="number">2020</span><span class="number">-02</span><span class="number">-25</span> <span class="number">14</span>:<span class="number">33</span>:<span class="number">10</span>,<span class="number">717</span> - root - ERROR - logger error message</span><br><span class="line"><span class="number">2020</span><span class="number">-02</span><span class="number">-25</span> <span class="number">14</span>:<span class="number">33</span>:<span class="number">10</span>,<span class="number">717</span> - root - CRITICAL - logger critical message</span><br><span class="line">logging库提供了多个组件：Logger、Handler、Filter、Formatter。Logger对象提供应用程序可直接使用的接口，Handler发送日志到适当的目的地，Filter提供了过滤日志信息的方法，Formatter指定日志显示格式。从这个输出可以看出logger = logging.getLogger()返回的Logger名为root。这里没有用logger.setLevel(logging.Debug)显示的为logger设置日志级别，所以使用默认的日志级别WARNIING，故结果只输出了大于等于WARNIING级别的信息。</span><br></pre></td></tr></table></figure><h2 id="创建两个logger对象"><a href="#创建两个logger对象" class="headerlink" title="创建两个logger对象"></a>创建两个logger对象</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ! /usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*</span></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> logging.handlers</span><br><span class="line">fh = logging.FileHandler(<span class="string">'test.log'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置日志格式</span></span><br><span class="line">ch = logging.StreamHandler()</span><br><span class="line">formatter = logging.Formatter(<span class="string">'%(asctime)s - %(name)s - %(levelname)s - %(message)s'</span>)</span><br><span class="line">fh.setFormatter(formatter)</span><br><span class="line">ch.setFormatter(formatter)</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义 logger对象</span></span><br><span class="line">logger1 = logging.getLogger(<span class="string">'logger'</span>)</span><br><span class="line">logger1.setLevel(logging.DEBUG)</span><br><span class="line"></span><br><span class="line">logger2 = logging.getLogger(<span class="string">'mylogger'</span>)</span><br><span class="line">logger2.setLevel(logging.INFO)</span><br><span class="line"></span><br><span class="line">logger1.addHandler(fh)</span><br><span class="line">logger1.addHandler(ch)</span><br><span class="line"></span><br><span class="line">logger2.addHandler(fh)</span><br><span class="line">logger2.addHandler(ch)</span><br><span class="line"></span><br><span class="line">logger1.debug(<span class="string">'logger1 debug message'</span>)</span><br><span class="line">logger1.info(<span class="string">'logger1 info message'</span>)</span><br><span class="line">logger1.warning(<span class="string">'logger1 warning message'</span>)</span><br><span class="line">logger1.error(<span class="string">'logger1 error message'</span>)</span><br><span class="line">logger1.critical(<span class="string">'logger1 critical message'</span>)</span><br><span class="line"></span><br><span class="line">logger2.debug(<span class="string">'logger2 debug message'</span>)</span><br><span class="line">logger2.info(<span class="string">'logger2 info message'</span>)</span><br><span class="line">logger2.warning(<span class="string">'logger2 warning message'</span>)</span><br><span class="line">logger2.error(<span class="string">'logger2 error message'</span>)</span><br><span class="line">logger2.critical(<span class="string">'logger2 critical message'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@RedHat_test log]<span class="comment"># cat test.log </span></span><br><span class="line"><span class="number">2020</span><span class="number">-02</span><span class="number">-25</span> <span class="number">15</span>:<span class="number">02</span>:<span class="number">27</span>,<span class="number">366</span> - logger - DEBUG - logger1 debug message</span><br><span class="line"><span class="number">2020</span><span class="number">-02</span><span class="number">-25</span> <span class="number">15</span>:<span class="number">02</span>:<span class="number">27</span>,<span class="number">367</span> - logger - INFO - logger1 info message</span><br><span class="line"><span class="number">2020</span><span class="number">-02</span><span class="number">-25</span> <span class="number">15</span>:<span class="number">02</span>:<span class="number">27</span>,<span class="number">367</span> - logger - WARNING - logger1 warning message</span><br><span class="line"><span class="number">2020</span><span class="number">-02</span><span class="number">-25</span> <span class="number">15</span>:<span class="number">02</span>:<span class="number">27</span>,<span class="number">367</span> - logger - ERROR - logger1 error message</span><br><span class="line"><span class="number">2020</span><span class="number">-02</span><span class="number">-25</span> <span class="number">15</span>:<span class="number">02</span>:<span class="number">27</span>,<span class="number">367</span> - logger - CRITICAL - logger1 critical message</span><br><span class="line"><span class="number">2020</span><span class="number">-02</span><span class="number">-25</span> <span class="number">15</span>:<span class="number">02</span>:<span class="number">27</span>,<span class="number">367</span> - mylogger - INFO - logger2 info message</span><br><span class="line"><span class="number">2020</span><span class="number">-02</span><span class="number">-25</span> <span class="number">15</span>:<span class="number">02</span>:<span class="number">27</span>,<span class="number">367</span> - mylogger - WARNING - logger2 warning message</span><br><span class="line"><span class="number">2020</span><span class="number">-02</span><span class="number">-25</span> <span class="number">15</span>:<span class="number">02</span>:<span class="number">27</span>,<span class="number">367</span> - mylogger - ERROR - logger2 error message</span><br><span class="line"><span class="number">2020</span><span class="number">-02</span><span class="number">-25</span> <span class="number">15</span>:<span class="number">02</span>:<span class="number">27</span>,<span class="number">367</span> - mylogger - CRITICAL - logger2 critical message</span><br><span class="line">----------------------------------------------------------------------------------------</span><br><span class="line"><span class="number">1.</span>我们明明通过logger1.setLevel(logging.DEBUG)将logger1的日志级别设置为了DEBUG，为何显示的时候没有显示出DEBUG级别的日志信息，而是从INFO级别的日志开始显示呢？</span><br><span class="line">原来logger1和logger2对应的是同一个Logger实例，只要logging.getLogger（name）中名称参数name相同则返回的Logger实例就是同一个，且仅有一个，也即name与Logger实例一一对应。在logger2实例中通过logger2.setLevel(logging.INFO)设置mylogger的日志级别为logging.INFO，所以最后logger1的输出遵从了后来设置的日志级别。</span><br><span class="line">2.为什么logger1、logger2对应的每个输出分别显示两次?</span><br><span class="line">这是因为我们通过logger = logging.getLogger()显示的创建了root Logger，而logger1 = logging.getLogger(<span class="string">'mylogger'</span>)创建了root Logger的孩子(root.)mylogger,logger2同样。而孩子,孙子，重孙……既会将消息分发给他的handler进行处理也会传递给所有的祖先Logger处理。</span><br></pre></td></tr></table></figure><h2 id="写入配置文件"><a href="#写入配置文件" class="headerlink" title="写入配置文件"></a>写入配置文件</h2><h3 id="定义一个-yaml-配置文件"><a href="#定义一个-yaml-配置文件" class="headerlink" title="定义一个 yaml 配置文件"></a>定义一个 yaml 配置文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 文件名：config.yaml</span></span><br><span class="line">version: <span class="number">1</span></span><br><span class="line">formatters:</span><br><span class="line">  brief:</span><br><span class="line">    format: <span class="string">"%(asctime)s - %(message)s"</span></span><br><span class="line">  simple:</span><br><span class="line">    format: <span class="string">"%(asctime)s - %(name)s - %(levelname)s - %(message)s"</span></span><br><span class="line">handlers:</span><br><span class="line">  console:</span><br><span class="line">    <span class="class"><span class="keyword">class</span> :</span> logging.StreamHandler</span><br><span class="line">    formatter: brief</span><br><span class="line">    level   : INFO</span><br><span class="line">    stream  : ext://sys.stdout</span><br><span class="line">  file:</span><br><span class="line">    <span class="class"><span class="keyword">class</span> :</span> logging.FileHandler</span><br><span class="line">    formatter: simple</span><br><span class="line">    level: DEBUG</span><br><span class="line">    filename: debug.log</span><br><span class="line">  error:</span><br><span class="line">    <span class="class"><span class="keyword">class</span>:</span> logging.handlers.RotatingFileHandler</span><br><span class="line">    level: ERROR</span><br><span class="line">    formatter: simple</span><br><span class="line">    filename: error.log</span><br><span class="line">    maxBytes: <span class="number">10485760</span></span><br><span class="line">    backupCount: <span class="number">20</span></span><br><span class="line">    encoding: utf8</span><br><span class="line">loggers:</span><br><span class="line">  main.core:</span><br><span class="line">    level: DEBUG</span><br><span class="line">    handlers: [console, file, error]</span><br><span class="line">root:</span><br><span class="line">  level: DEBUG</span><br><span class="line">  handlers: [console]</span><br></pre></td></tr></table></figure><h3 id="定义一个主入口文件"><a href="#定义一个主入口文件" class="headerlink" title="定义一个主入口文件"></a>定义一个主入口文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 文件名：main.py</span></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> core</span><br><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line"><span class="keyword">import</span> logging.config</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setup_logging</span><span class="params">(default_path=<span class="string">'config.yaml'</span>, default_level=logging.INFO)</span>:</span></span><br><span class="line">    path = default_path</span><br><span class="line">    <span class="keyword">if</span> os.path.exists(path):</span><br><span class="line">        <span class="keyword">with</span> open(path, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            config = yaml.load(f)</span><br><span class="line">            logging.config.dictConfig(config)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        logging.basicConfig(level=default_level)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">()</span>:</span></span><br><span class="line">    logging.debug(<span class="string">'Start'</span>)</span><br><span class="line">    logging.info(<span class="string">'Exec'</span>)</span><br><span class="line">    logging.info(<span class="string">'Finished'</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    yaml_path = <span class="string">'config.yaml'</span></span><br><span class="line">    setup_logging(yaml_path)</span><br><span class="line">    log()</span><br><span class="line">    core.run()</span><br><span class="line"><span class="comment">#这里我们定义了一个 setup_logging() 方法，里面读取了 yaml 文件的配置，然后通过 dictConfig() 方法将配置项传给了 logging 模块进行全局初始化</span></span><br></pre></td></tr></table></figure><h3 id="这个模块还引入了另外一个模块-core"><a href="#这个模块还引入了另外一个模块-core" class="headerlink" title="这个模块还引入了另外一个模块 core"></a>这个模块还引入了另外一个模块 core</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 文件名：core.py</span></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"> </span><br><span class="line">logger = logging.getLogger(<span class="string">'main.core'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></span><br><span class="line">    logger.info(<span class="string">'Core Info'</span>)</span><br><span class="line">    logger.debug(<span class="string">'Core Debug'</span>)</span><br><span class="line">    logger.error(<span class="string">'Core Error'</span>)</span><br></pre></td></tr></table></figure><h3 id="控制台运行结果输出"><a href="#控制台运行结果输出" class="headerlink" title="控制台运行结果输出"></a>控制台运行结果输出</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2018</span><span class="number">-06</span><span class="number">-03</span> <span class="number">17</span>:<span class="number">07</span>:<span class="number">12</span>,<span class="number">727</span> - Exec</span><br><span class="line"><span class="number">2018</span><span class="number">-06</span><span class="number">-03</span> <span class="number">17</span>:<span class="number">07</span>:<span class="number">12</span>,<span class="number">727</span> - Finished</span><br><span class="line"><span class="number">2018</span><span class="number">-06</span><span class="number">-03</span> <span class="number">17</span>:<span class="number">07</span>:<span class="number">12</span>,<span class="number">727</span> - Core Info</span><br><span class="line"><span class="number">2018</span><span class="number">-06</span><span class="number">-03</span> <span class="number">17</span>:<span class="number">07</span>:<span class="number">12</span>,<span class="number">727</span> - Core Info</span><br><span class="line"><span class="number">2018</span><span class="number">-06</span><span class="number">-03</span> <span class="number">17</span>:<span class="number">07</span>:<span class="number">12</span>,<span class="number">728</span> - Core Error</span><br><span class="line"><span class="number">2018</span><span class="number">-06</span><span class="number">-03</span> <span class="number">17</span>:<span class="number">07</span>:<span class="number">12</span>,<span class="number">728</span> - Core Error</span><br></pre></td></tr></table></figure><h3 id="在-debug-log-文件中则包含了-core-py-的运行结果"><a href="#在-debug-log-文件中则包含了-core-py-的运行结果" class="headerlink" title="在 debug.log 文件中则包含了 core.py 的运行结果"></a>在 debug.log 文件中则包含了 core.py 的运行结果</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2018</span><span class="number">-06</span><span class="number">-03</span> <span class="number">17</span>:<span class="number">07</span>:<span class="number">12</span>,<span class="number">727</span> - main.core - INFO - Core Info</span><br><span class="line"><span class="number">2018</span><span class="number">-06</span><span class="number">-03</span> <span class="number">17</span>:<span class="number">07</span>:<span class="number">12</span>,<span class="number">727</span> - main.core - DEBUG - Core Debug</span><br><span class="line"><span class="number">2018</span><span class="number">-06</span><span class="number">-03</span> <span class="number">17</span>:<span class="number">07</span>:<span class="number">12</span>,<span class="number">728</span> - main.core - ERROR - Core Error</span><br></pre></td></tr></table></figure><h2 id="对logging模块进行封装"><a href="#对logging模块进行封装" class="headerlink" title="对logging模块进行封装"></a>对logging模块进行封装</h2><h3 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@RedHat_test log]<span class="comment"># ls</span></span><br><span class="line">bin  lib  logs</span><br><span class="line"><span class="comment"># bin里面有主函数main.py</span></span><br><span class="line"><span class="comment"># lib里面有log.py</span></span><br></pre></td></tr></table></figure><h3 id="展现代码"><a href="#展现代码" class="headerlink" title="展现代码"></a>展现代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># log.py</span></span><br><span class="line">[root@RedHat_test lib]<span class="comment"># cat log.py</span></span><br><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> logging.handlers <span class="keyword">import</span> TimedRotatingFileHandler</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initlog</span><span class="params">(log_file,loglevel,rotat=True)</span>:</span></span><br><span class="line">    <span class="keyword">global</span>  logger</span><br><span class="line">    <span class="comment">#生成一个日志对象</span></span><br><span class="line">    logger = logging.getLogger()</span><br><span class="line">    logger.setLevel(loglevel)</span><br><span class="line">    <span class="keyword">if</span> loglevel <span class="keyword">is</span> logging.DEBUG:</span><br><span class="line">        formatter = logging.Formatter(<span class="string">'%(asctime)s  %(levelname)s %(threadName)s  %(funcName)s  %(lineno)d %(message)s '</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        formatter = logging.Formatter(<span class="string">'%(asctime)s  %(levelname)s %(threadName)s [%(funcName)s] %(message)s '</span>)</span><br><span class="line">    <span class="comment"># Create a file handler to store error messages</span></span><br><span class="line">    <span class="comment">#fhdr = logging.FileHandler(log_file)</span></span><br><span class="line">    <span class="keyword">if</span> rotat:</span><br><span class="line">        <span class="comment">#fhdr =  TimedRotatingFileHandler(log_file,when='midnight',backupCount=3000)</span></span><br><span class="line">        <span class="comment">#fhdr.suffix= "%Y%m%d"</span></span><br><span class="line">        fhdr =  TimedRotatingFileHandler(log_file,when=<span class="string">'D'</span>,interval=<span class="number">1</span>,backupCount=<span class="number">200</span>)</span><br><span class="line">        fhdr.suffix= <span class="string">"%Y-%m-%d.log"</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        fhdr = logging.FileHandler(log_file)</span><br><span class="line">    fhdr.setFormatter(formatter)</span><br><span class="line">    <span class="comment"># Create a stream handler to print all messages to console </span></span><br><span class="line">    chdr = logging.StreamHandler()</span><br><span class="line">    chdr.setFormatter(formatter)</span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    logger.addHandler(fhdr)</span><br><span class="line">    logger.addHandler(chdr)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># main.py</span></span><br><span class="line">[root@RedHat_test bin]<span class="comment"># cat main.py </span></span><br><span class="line"><span class="comment">#! /usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys,os,string,inspect</span><br><span class="line">sys.path.append(os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))),<span class="string">'lib'</span>))</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> log</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">logger = logging.getLogger()</span><br><span class="line"></span><br><span class="line">logfile=os.path.join(<span class="string">'/root/log/logs'</span>,<span class="string">'dyscripty.log'</span>)</span><br><span class="line">loglevel=logging.INFO</span><br><span class="line">log.initlog(logfile, loglevel)</span><br><span class="line"></span><br><span class="line">a = <span class="string">'123456789'</span></span><br><span class="line">logger.info(a)</span><br></pre></td></tr></table></figure><h3 id="展示效果"><a href="#展示效果" class="headerlink" title="展示效果"></a>展示效果</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@RedHat_test bin]<span class="comment"># python main.py </span></span><br><span class="line"><span class="number">2020</span><span class="number">-02</span><span class="number">-25</span> <span class="number">15</span>:<span class="number">14</span>:<span class="number">33</span>,<span class="number">596</span>  INFO MainThread [&lt;module&gt;] <span class="number">123456789</span> </span><br><span class="line">[root@RedHat_test logs]<span class="comment"># cat dyscripty.log </span></span><br><span class="line"><span class="number">2020</span><span class="number">-02</span><span class="number">-25</span> <span class="number">15</span>:<span class="number">14</span>:<span class="number">33</span>,<span class="number">596</span>  INFO MainThread [&lt;module&gt;] <span class="number">123456789</span></span><br></pre></td></tr></table></figure><h2 id="Django中的日志配置"><a href="#Django中的日志配置" class="headerlink" title="Django中的日志配置"></a>Django中的日志配置</h2><h3 id="Django的日志在-your-project-name-settings-py文件中配置"><a href="#Django的日志在-your-project-name-settings-py文件中配置" class="headerlink" title="Django的日志在/your_project_name/settings.py文件中配置"></a>Django的日志在/your_project_name/settings.py文件中配置</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  log  首先创建日志存储路径.</span></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> django.utils.log</span><br><span class="line"><span class="keyword">import</span> logging.handlers</span><br><span class="line"> </span><br><span class="line">log_path = os.path.join(BASE_DIR, <span class="string">"logs"</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(log_path):</span><br><span class="line">    os.makedirs(<span class="string">"logs"</span>)</span><br><span class="line"><span class="comment"># DJANGO_LOG_LEVEL=DEBUG</span></span><br><span class="line"> </span><br><span class="line">LOGGING = &#123;</span><br><span class="line">    <span class="string">'version'</span>: <span class="number">1</span>,  <span class="comment"># 保留字</span></span><br><span class="line">    <span class="string">'disable_existing_loggers'</span>: <span class="literal">False</span>,  <span class="comment"># 禁用已经存在的logger实例</span></span><br><span class="line">    <span class="comment"># 日志文件的格式</span></span><br><span class="line">    <span class="string">'formatters'</span>: &#123;</span><br><span class="line">        <span class="comment"># 详细的日志格式</span></span><br><span class="line">        <span class="string">'standard'</span>: &#123;</span><br><span class="line">            <span class="string">'format'</span>: <span class="string">'[%(asctime)s][%(threadName)s:%(thread)d][task_id:%(name)s][%(filename)s:%(lineno)d]'</span></span><br><span class="line">                      <span class="string">'[%(levelname)s][%(message)s]'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment"># 简单的日志格式</span></span><br><span class="line">        <span class="string">'simple'</span>: &#123;</span><br><span class="line">            <span class="string">'format'</span>: <span class="string">'[%(levelname)s][%(asctime)s][%(filename)s:%(lineno)d]%(message)s'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment"># 定义一个特殊的日志格式</span></span><br><span class="line">        <span class="string">'collect'</span>: &#123;</span><br><span class="line">            <span class="string">'format'</span>: <span class="string">'%(message)s'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment"># 过滤器</span></span><br><span class="line">    <span class="string">'filters'</span>: &#123;</span><br><span class="line">        <span class="string">'require_debug_true'</span>: &#123;</span><br><span class="line">            <span class="string">'()'</span>: <span class="string">'django.utils.log.RequireDebugTrue'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment"># 处理器</span></span><br><span class="line">    <span class="string">'handlers'</span>: &#123;</span><br><span class="line">        <span class="string">'console'</span>: &#123;     <span class="comment"># 在终端打印</span></span><br><span class="line">            <span class="string">'level'</span>: <span class="string">'DEBUG'</span>,</span><br><span class="line">            <span class="string">'filters'</span>: [<span class="string">'require_debug_true'</span>],  <span class="comment"># 只有在Django debug为True时才在屏幕打印日志</span></span><br><span class="line">            <span class="string">'class'</span>: <span class="string">'logging.StreamHandler'</span>,  <span class="comment">#</span></span><br><span class="line">            <span class="string">'formatter'</span>: <span class="string">'simple'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">'default'</span>: &#123;    <span class="comment"># 默认的</span></span><br><span class="line">            <span class="string">'level'</span>: <span class="string">'INFO'</span>,</span><br><span class="line">            <span class="string">'class'</span>: <span class="string">'logging.handlers.RotatingFileHandler'</span>,  <span class="comment"># 保存到文件，自动切</span></span><br><span class="line">            <span class="string">'filename'</span>: os.path.join(BASE_DIR+<span class="string">'/logs/'</span>, <span class="string">"all.log"</span>),  <span class="comment"># 日志文件</span></span><br><span class="line">            <span class="string">'maxBytes'</span>: <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">50</span>,                    <span class="comment"># 日志大小 50M</span></span><br><span class="line">            <span class="string">'backupCount'</span>: <span class="number">3</span>,                                <span class="comment"># 最多备份几个</span></span><br><span class="line">            <span class="string">'formatter'</span>: <span class="string">'standard'</span>,</span><br><span class="line">            <span class="string">'encoding'</span>: <span class="string">'utf-8'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">'error'</span>: &#123;   <span class="comment"># 专门用来记错误日志</span></span><br><span class="line">            <span class="string">'level'</span>: <span class="string">'ERROR'</span>,</span><br><span class="line">            <span class="string">'class'</span>: <span class="string">'logging.handlers.RotatingFileHandler'</span>,  <span class="comment"># 保存到文件，自动切</span></span><br><span class="line">            <span class="string">'filename'</span>: os.path.join(BASE_DIR+<span class="string">'/logs/'</span>, <span class="string">"error.log"</span>),  <span class="comment"># 日志文件</span></span><br><span class="line">            <span class="string">'maxBytes'</span>: <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">50</span>,  <span class="comment"># 日志大小 50M</span></span><br><span class="line">            <span class="string">'backupCount'</span>: <span class="number">5</span>,</span><br><span class="line">            <span class="string">'formatter'</span>: <span class="string">'standard'</span>,</span><br><span class="line">            <span class="string">'encoding'</span>: <span class="string">'utf-8'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">'collect'</span>: &#123;   <span class="comment"># 专门定义一个收集特定信息的日志</span></span><br><span class="line">            <span class="string">'level'</span>: <span class="string">'INFO'</span>,</span><br><span class="line">            <span class="string">'class'</span>: <span class="string">'logging.handlers.RotatingFileHandler'</span>,  <span class="comment"># 保存到文件，自动切</span></span><br><span class="line">            <span class="string">'filename'</span>: os.path.join(BASE_DIR+<span class="string">'/logs/'</span>, <span class="string">"collect.log"</span>),</span><br><span class="line">            <span class="string">'maxBytes'</span>: <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">50</span>,  <span class="comment"># 日志大小 50M</span></span><br><span class="line">            <span class="string">'backupCount'</span>: <span class="number">5</span>,</span><br><span class="line">            <span class="string">'formatter'</span>: <span class="string">'collect'</span>,</span><br><span class="line">            <span class="string">'encoding'</span>: <span class="string">"utf-8"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">'scprits_handler'</span>: &#123;</span><br><span class="line">            <span class="string">'level'</span>:<span class="string">'DEBUG'</span>,</span><br><span class="line">            <span class="string">'class'</span>:<span class="string">'logging.handlers.RotatingFileHandler'</span>,</span><br><span class="line">            <span class="string">'filename'</span>: os.path.join(BASE_DIR+<span class="string">'/logs/'</span>, <span class="string">"script.log"</span>),</span><br><span class="line">            <span class="string">'maxBytes'</span>: <span class="number">1024</span>*<span class="number">1024</span>*<span class="number">5</span>,</span><br><span class="line">            <span class="string">'backupCount'</span>: <span class="number">5</span>,</span><br><span class="line">            <span class="string">'formatter'</span>:<span class="string">'standard'</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'loggers'</span>: &#123;</span><br><span class="line">        <span class="string">'django'</span>: &#123;             <span class="comment"># 默认的logger应用如下配置</span></span><br><span class="line">            <span class="string">'handlers'</span>: [<span class="string">'default'</span>, <span class="string">'console'</span>, <span class="string">'error'</span>],  <span class="comment"># 上线之后可以把'console'移除</span></span><br><span class="line">            <span class="string">'level'</span>: <span class="string">'DEBUG'</span>,</span><br><span class="line">            <span class="string">'propagate'</span>: <span class="literal">True</span>,  <span class="comment"># 向不向更高级别的logger传递</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">'collect'</span>: &#123;      <span class="comment"># 名为 'collect'的logger还单独处理</span></span><br><span class="line">            <span class="string">'handlers'</span>: [<span class="string">'console'</span>, <span class="string">'collect'</span>],</span><br><span class="line">            <span class="string">'level'</span>: <span class="string">'INFO'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">'scripts'</span>: &#123;</span><br><span class="line">            <span class="string">'handlers'</span>: [<span class="string">'scprits_handler'</span>],</span><br><span class="line">            <span class="string">'level'</span>: <span class="string">'INFO'</span>,</span><br><span class="line">            <span class="string">'propagate'</span>: <span class="literal">False</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="此配置的三个部分"><a href="#此配置的三个部分" class="headerlink" title="此配置的三个部分"></a>此配置的三个部分</h3><p>formatters: 指定输出的格式，被handler使用。</p><p>handlers： 指定输出到控制台还是文件中，以及输出的方式。被logger引用。</p><p>loggers： 指定django中的每个模块使用哪个handlers。以及日志输出的级别。</p><p>注意：日志的输出级别是由loggers中的每个模块中level选项定义。如果没有配置，那么默认为warning级别。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">handlers与loggers都存在level，两者不同：</span><br><span class="line"><span class="number">1</span>、loggers中的level表示可以接受的错误级别，就是说loggers接受level或者比level更高级别的错误，由propagate决定:propagate为<span class="literal">True</span>, 则向上传播；</span><br><span class="line"><span class="number">2</span>、handlers的level表示日志级别</span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging </span><br><span class="line">logger = logging.getLogger(<span class="string">'django'</span>)</span><br><span class="line">logger.info(<span class="string">'-------------------------'</span>)</span><br><span class="line">logger.error(str(e))</span><br><span class="line">logger.warn(<span class="string">'warn'</span>)</span><br><span class="line">logger.debug(<span class="string">'debug'</span>)</span><br></pre></td></tr></table></figure><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="/Users/huqi/Desktop/屏幕快照 2020-02-25 下午3.47.31.png" alt="屏幕快照 2020-02-25 下午3.47.31"></p>]]></content>
      
      
      <categories>
          
          <category> Linux_python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux_python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sar—性能监控命令</title>
      <link href="/2020/03/09/sar-%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E5%91%BD%E4%BB%A4/"/>
      <url>/2020/03/09/sar-%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在使用 Linux 系统时，常常会遇到各种各样的问题，比如系统容易死机或者运行速度突然变慢，这时我们常常猜测：是否硬盘空间不足，是否内存不足，是否 I/O 出现瓶颈，还是系统的核心参数出了问题？这时，我们应该考虑使用 sar 工具对系统做一个全面了解，分析系统的负载状况。</p><p>sar（System Activity Reporter）是系统活动情况报告的缩写。sar 工具将对系统当前的状态进行取样，然后通过计算数据和比例来表达系统的当前运行状态。它的特点是可以连续对系统取样，获得大量的取样数据；取样数据和分析的结果都可以存入文件，所需的负载很小。 sar 是目前 Linux 上最为全面的系统性能分析工具之一，可以从多方面对系统的活动进行报告，包括：文件的读写情况、系统调用的使用情况、磁盘I/O、CPU效率、内存使用状况、进程活动及IPC有关的活动等。为了提供不同的信息，sar 提供了丰富的选项、因此使用较为复杂。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@RedHat_test ~]# yum install sysstat</span><br></pre></td></tr></table></figure><p>下面的命令启动服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@RedHat_test ~]# service sysstat start</span><br></pre></td></tr></table></figure><h2 id="sar命令常用格式"><a href="#sar命令常用格式" class="headerlink" title="sar命令常用格式"></a>sar命令常用格式</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@RedHat_test ~]# sar  [options]  [-A]  [-o file]  t  [n]</span><br><span class="line">t : 采样间隔</span><br><span class="line">n : 采样次数，默认值是1</span><br><span class="line">-o file : 将命令结果以二进制格式存放在文件中，file是文件名</span><br><span class="line">options : 命令行选项，sar命令常用选项如下：</span><br><span class="line">-A : 所有报告的总和</span><br><span class="line">-u : 输出CPU使用情况的统计信息</span><br><span class="line">-v : 输出inode、文件和其他内核表的统计信息</span><br><span class="line">-d : 输出每一个块设备的活动信息</span><br><span class="line">-r : 输出内存和交换空间的统计信息</span><br><span class="line">-b : 显示I/O的传送速率和统计信息</span><br><span class="line">-a : 文件读写情况</span><br><span class="line">-c : 输出进程统计信息，美妙创建的进程数</span><br><span class="line">-R : 输出内存页面的统计信息</span><br><span class="line">-y : 终端设备活动情况</span><br><span class="line">-w : 输出系统交换活动信息</span><br></pre></td></tr></table></figure><h2 id="CPU资源监控"><a href="#CPU资源监控" class="headerlink" title="CPU资源监控"></a>CPU资源监控</h2><p>例如：每10秒采样一次，连续采样3次，观察CPU的使用情况，并将采样结果以二进制形式存入当前目录下的文件test中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[root@RedHat_test ~]# sar -u -o test 10 3</span><br><span class="line">Linux 3.10.0-957.el7.x86_64 (RedHat_test) 2020年01月17日 _x86_64_(4 CPU)</span><br><span class="line">16时04分12秒     CPU     %user     %nice   %system   %iowait    %steal     %idle</span><br><span class="line">16时04分22秒     all      0.00      0.00      0.03      0.00      0.00     99.97</span><br><span class="line">16时04分32秒     all      0.03      0.00      0.00      0.00      0.00     99.97</span><br><span class="line">16时04分42秒     all      0.00      0.00      0.03      0.00      0.00     99.97</span><br><span class="line">平均时间:     all      0.01      0.00      0.02      0.00      0.00     99.97</span><br><span class="line">----------------------------------------------------------------------------------------</span><br><span class="line">CPU : all 表示统计信息为所有CPU的平均值</span><br><span class="line"><span class="meta">%</span><span class="bash">user : 显示用户级别（application）运行使用CPU总时间的百分比</span></span><br><span class="line"><span class="meta">%</span><span class="bash">nice : 显示用户级别，用于nice操作，所占用CPU总时间的百分比</span></span><br><span class="line"><span class="meta">%</span><span class="bash">system : 在核心级别（kernel）运行所使用CPU总时间的百分比</span></span><br><span class="line"><span class="meta">%</span><span class="bash">iowait : 显示用于等待I/O操作占用CPU总时间的百分比</span></span><br><span class="line"><span class="meta">%</span><span class="bash">steal : 管理程序（hypervisor）为另一个虚拟进程提供服务而等待虚拟CPU的百分比</span></span><br><span class="line"><span class="meta">%</span><span class="bash">idle : 显示CPU空闲时间占用CPU总时间的百分比。</span></span><br><span class="line">----------------------------------------------------------------------------------------</span><br><span class="line">1.若%iowait的值过高，表示硬盘存在I/O瓶颈</span><br><span class="line">2.若%idle的值高系统响应慢时，有可能是CPU等待分配内存，此时应加大内存容量</span><br><span class="line">3.若%idle的值持续低于1，则系统的CPU处理能力相对较低，表明系统中最需要解决的资源是CPU</span><br><span class="line">----------------------------------------------------------------------------------------</span><br><span class="line">如果要查看二进制文件test中的内容，需键入如下sar命令：</span><br><span class="line">[root@RedHat_test ~]# sar -u -f test </span><br><span class="line">Linux 3.10.0-957.el7.x86_64 (RedHat_test) 2020年01月17日 _x86_64_(4 CPU)</span><br><span class="line"></span><br><span class="line">16时04分12秒     CPU     %user     %nice   %system   %iowait    %steal     %idle</span><br><span class="line">16时04分22秒     all      0.00      0.00      0.03      0.00      0.00     99.97</span><br><span class="line">16时04分32秒     all      0.03      0.00      0.00      0.00      0.00     99.97</span><br><span class="line">16时04分42秒     all      0.00      0.00      0.03      0.00      0.00     99.97</span><br><span class="line">平均时间:     all      0.01      0.00      0.02      0.00      0.00     99.97</span><br></pre></td></tr></table></figure><h2 id="inode、文件和其他内核表监控"><a href="#inode、文件和其他内核表监控" class="headerlink" title="inode、文件和其他内核表监控"></a>inode、文件和其他内核表监控</h2><p>例如：每10秒采样一次，连续采样3次，观察核心表的状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@RedHat_test ~]# sar -v 10 3</span><br><span class="line">Linux 3.10.0-957.el7.x86_64 (RedHat_test) 2020年01月17日 _x86_64_(4 CPU)</span><br><span class="line">16时28分07秒 dentunusd   file-nr  inode-nr    pty-nr</span><br><span class="line">16时28分17秒     18074       896     21105         1</span><br><span class="line">16时28分27秒     18074       896     21105         1</span><br><span class="line">16时28分37秒     18074       896     21105         1</span><br><span class="line">平均时间:     18074       896     21105         1</span><br><span class="line">----------------------------------------------------------------------------------------</span><br><span class="line">dentunusd : 目录高速缓存中未被使用的条目数量</span><br><span class="line">file-nr : 文件句柄（file handle）的使用数量</span><br><span class="line">inode-nr : 索引节点句柄（inode handle）的使用数量</span><br><span class="line">pty-nr : 使用的pty数量</span><br></pre></td></tr></table></figure><h2 id="内存和交换空间监控"><a href="#内存和交换空间监控" class="headerlink" title="内存和交换空间监控"></a>内存和交换空间监控</h2><p>例如：每10秒采样一次，连续采样3次，监控内存和交换分区</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@RedHat_test ~]# sar -r 10 3</span><br><span class="line">Linux 3.10.0-957.el7.x86_64 (RedHat_test) 2020年01月17日 _x86_64_(4 CPU)</span><br><span class="line">16时34分25秒 kbmemfree kbmemused  %memused kbbuffers  kbcached  kbcommit   %commit  kbactive   kbinact   kbdirty</span><br><span class="line">16时34分35秒  15902672    363840      2.24      2108    137640    245052      1.33     95560     87300         0</span><br><span class="line">16时34分45秒  15902672    363840      2.24      2108    137640    245052      1.33     95560     87300         0</span><br><span class="line">16时34分55秒  15902672    363840      2.24      2108    137640    245052      1.33     95560     87300         0</span><br><span class="line">平均时间:  15902672    363840      2.24      2108    137640    245052      1.33     95560     87300         0</span><br><span class="line">----------------------------------------------------------------------------------------</span><br><span class="line">kbmemfree : 这个值和free命中的free值基本一致。所以它不包括buffer和cache的空间</span><br><span class="line">kbmemused : 这个值和free命令中的used值基本一致，所以它包括buffer和cache的空间</span><br><span class="line">memused : 这个值是kbmemused和内存总量（不包括swqp）的一个百分比</span><br><span class="line">kbbuffers 和 kbcached : 这两个值就是free命中的buffer和cache</span><br><span class="line">kbcommit : 保证当前系统所需要的内存，即为了确保不溢出而需要的内存（RAM+swap）</span><br><span class="line"><span class="meta">%</span><span class="bash">commit : 这个值是kbcommit与内存总量（包括swap）的一个百分比</span></span><br></pre></td></tr></table></figure><h2 id="内存分页监控"><a href="#内存分页监控" class="headerlink" title="内存分页监控"></a>内存分页监控</h2><p>例如：每10秒采样一次，连续采样3次，监控内存分页</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@RedHat_test ~]# sar -B 10 3</span><br><span class="line">Linux 3.10.0-957.el7.x86_64 (RedHat_test) 2020年01月17日 _x86_64_(4 CPU)</span><br><span class="line"></span><br><span class="line">16时44分18秒  pgpgin/s pgpgout/s   fault/s  majflt/s  pgfree/s pgscank/s pgscand/s pgsteal/s    %vmeff</span><br><span class="line">16时44分28秒      0.00      0.00      3.80      0.00      8.80      0.00      0.00      0.00      0.00</span><br><span class="line">16时44分38秒      0.00      0.00      3.70      0.00      8.50      0.00      0.00      0.00      0.00</span><br><span class="line">16时44分48秒      0.00      0.00      2.90      0.00      8.50      0.00      0.00      0.00      0.00</span><br><span class="line">平均时间:      0.00      0.00      3.47      0.00      8.60      0.00      0.00      0.00      0.00</span><br><span class="line">----------------------------------------------------------------------------------------</span><br><span class="line">pgpgin/s : 表示每秒从磁盘或SWAP置换到内存的字节数（KB）</span><br><span class="line">pgpgout/s : 表示每秒从内存置换到磁盘或SWAP的字节数（KB）</span><br><span class="line">fault/s : 表示每秒系统产生的缺页数，即主缺页与次缺页之和（major+minor）</span><br><span class="line">majflt/s : 表示每秒钟产生的主缺页数</span><br><span class="line">pgfree/s : 每秒被放入空闲队列中的页个数</span><br><span class="line">pgscank/s : 每秒被kswapd扫描的页个数</span><br><span class="line">pgscand/s : 每秒直接被扫描的页个数</span><br><span class="line">pgsteal/s : 每秒钟从cache中被清除来满足内存需要的页个数</span><br><span class="line"><span class="meta">%</span><span class="bash">vmeff : 每秒清除的页（pgsteal）占总扫描页（pgscank+pgscand）的百分比</span></span><br></pre></td></tr></table></figure><h2 id="I-O和传送速率监控"><a href="#I-O和传送速率监控" class="headerlink" title="I/O和传送速率监控"></a>I/O和传送速率监控</h2><p>例如：每10秒采样一次，连续采样3次，报告缓冲区的使用情况</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@RedHat_test ~]# sar -b 10 3</span><br><span class="line">Linux 3.10.0-957.el7.x86_64 (RedHat_test) 2020年01月17日 _x86_64_(4 CPU)</span><br><span class="line">17时03分12秒       tps      rtps      wtps   bread/s   bwrtn/s</span><br><span class="line">17时03分22秒      0.30      0.00      0.30      0.00      3.20</span><br><span class="line">17时03分32秒      0.60      0.00      0.60      0.00      4.80</span><br><span class="line">17时03分42秒      0.00      0.00      0.00      0.00      0.00</span><br><span class="line">平均时间:      0.30      0.00      0.30      0.00      2.67</span><br><span class="line">----------------------------------------------------------------------------------------</span><br><span class="line">tps : 每秒钟物理设备I/O传输总量</span><br><span class="line">rtps : 每秒钟从物理设备读入的数据总量</span><br><span class="line">wtps : 每秒钟向物理设备写入的数据总量</span><br><span class="line">bread/s : 每秒钟从物理设备读入的数据量，单位为 块/s</span><br><span class="line">bwrtn/s : 每秒钟从物理设备写入的数据量，单位为 块/s</span><br></pre></td></tr></table></figure><h2 id="进程队列长度和平均负载状态监控"><a href="#进程队列长度和平均负载状态监控" class="headerlink" title="进程队列长度和平均负载状态监控"></a>进程队列长度和平均负载状态监控</h2><p>例如：每10秒采样一次，连续采样3次，监控进程队列长度和平均负载状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@RedHat_test ~]# sar -q 10 3</span><br><span class="line">Linux 3.10.0-957.el7.x86_64 (RedHat_test) 2020年01月17日 _x86_64_(4 CPU)</span><br><span class="line">17时09分34秒   runq-sz  plist-sz   ldavg-1   ldavg-5  ldavg-15   blocked</span><br><span class="line">17时09分44秒         1       124      0.00      0.01      0.05         0</span><br><span class="line">17时09分54秒         0       124      0.00      0.01      0.05         0</span><br><span class="line">17时10分04秒         1       127      0.00      0.01      0.05         0</span><br><span class="line">平均时间:         1       125      0.00      0.01      0.05         0</span><br><span class="line">------------------------------------------------------------------------------------------</span><br><span class="line">runq-sz : 运行队列的长度（等待运行的进程数）</span><br><span class="line">plist-sz : 进程列表中进程（processes）和线程（threads）的数量</span><br><span class="line">ldavg-1 : 最后1分钟的系统平均负载（System load average）</span><br><span class="line">ldavg-5 : 过去5分钟的系统平均负载</span><br><span class="line">ldavg-15 : 过去15分钟的系统平均负载</span><br></pre></td></tr></table></figure><h2 id="系统交换活动信息监控"><a href="#系统交换活动信息监控" class="headerlink" title="系统交换活动信息监控"></a>系统交换活动信息监控</h2><p>例如：每10秒采样一次，连续采样3次，监控系统交换活动信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@RedHat_test ~]# sar -W 10 3</span><br><span class="line">Linux 3.10.0-957.el7.x86_64 (RedHat_test) 2020年01月17日 _x86_64_(4 CPU)</span><br><span class="line">17时17分05秒  pswpin/s pswpout/s</span><br><span class="line">17时17分15秒      0.00      0.00</span><br><span class="line">17时17分25秒      0.00      0.00</span><br><span class="line">17时17分35秒      0.00      0.00</span><br><span class="line">平均时间:      0.00      0.00</span><br><span class="line">----------------------------------------------------------------------------------------</span><br><span class="line">pswpin/s : 每秒系统换入的交换页面（swap page）数量</span><br><span class="line">pswpout/s : 每秒系统换出的交换页面（swap page）数量</span><br></pre></td></tr></table></figure><h2 id="设备使用情况监控"><a href="#设备使用情况监控" class="headerlink" title="设备使用情况监控"></a>设备使用情况监控</h2><p>例如：每10秒采样一次，连续采样3次，报告设备使用情况</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">[root@RedHat_test ~]# sar -d 10 3 -p</span><br><span class="line">Linux 3.10.0-957.el7.x86_64 (RedHat_test) 2020年01月17日 _x86_64_(4 CPU)</span><br><span class="line"></span><br><span class="line">17时41分31秒       DEV       tps  rd_sec/s  wr_sec/s  avgrq-sz  avgqu-sz     await     svctm     %util</span><br><span class="line">17时41分41秒       vda      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00</span><br><span class="line">17时41分41秒 centos-root      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00</span><br><span class="line">17时41分41秒 centos-swap      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00</span><br><span class="line"></span><br><span class="line">17时41分41秒       DEV       tps  rd_sec/s  wr_sec/s  avgrq-sz  avgqu-sz     await     svctm     %util</span><br><span class="line">17时41分51秒       vda      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00</span><br><span class="line">17时41分51秒 centos-root      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00</span><br><span class="line">17时41分51秒 centos-swap      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00</span><br><span class="line"></span><br><span class="line">17时41分51秒       DEV       tps  rd_sec/s  wr_sec/s  avgrq-sz  avgqu-sz     await     svctm     %util</span><br><span class="line">17时42分01秒       vda      0.30      0.00      0.30      1.00      0.03    112.00    103.67      3.11</span><br><span class="line">17时42分01秒 centos-root      0.20      0.00      0.30      1.50      0.03    168.00    168.00      3.36</span><br><span class="line">17时42分01秒 centos-swap      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00</span><br><span class="line"></span><br><span class="line">平均时间:       DEV       tps  rd_sec/s  wr_sec/s  avgrq-sz  avgqu-sz     await     svctm     %util</span><br><span class="line">平均时间:       vda      0.10      0.00      0.10      1.00      0.01    112.00    103.67      1.04</span><br><span class="line">平均时间: centos-root      0.07      0.00      0.10      1.50      0.01    168.00    168.00      1.12</span><br><span class="line">平均时间: centos-swap      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00</span><br><span class="line">-----------------------------------------------------------------------------------------</span><br><span class="line">-p : 可以打印出vda、centos-root、centos-swap等磁盘设备名称，如果不用参数-p，设备节点则有可能是别的</span><br><span class="line">tps : 每秒从物理磁盘I/O的次数，多个逻辑请求会被合并为一个I/O磁盘请求，一次传输的大小是不确定的。</span><br><span class="line">rd_sec/s : 每秒读扇区的次数</span><br><span class="line">wr_sec/s : 每秒写扇区的次数</span><br><span class="line">avgrp-sz : 平均每次设备I/O操作的数据大小（扇区）</span><br><span class="line">avgqu-sz : 磁盘请求队列的平均长度</span><br><span class="line">await : 从请求磁盘操作到系统完成处理，每次请求的平均消耗时间，包括请求队列等待时间，单位是毫秒（1秒=1000毫秒）</span><br><span class="line">svctm : 系统处理每次请求的平均时间，不包括在请求队列中消耗的时间</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux_command </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux_command </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bc—数字计算器</title>
      <link href="/2020/03/07/bc-%E6%95%B0%E5%AD%97%E8%AE%A1%E7%AE%97%E5%99%A8/"/>
      <url>/2020/03/07/bc-%E6%95%B0%E5%AD%97%E8%AE%A1%E7%AE%97%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>bc命令是一种支持任意精度的交互执行的计算器语言。bash内置了对整数四则运算的支持，但是并不支持浮点运算，而bc命令可以很方便的进行浮点运算，当然整数运算也不再话下。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@RedHat_test ~]# yum install bc</span><br></pre></td></tr></table></figure><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@elasticsearch-03 ~]# bc(选项)(参数)</span><br><span class="line">-i：强制进入交互式模式；</span><br><span class="line">-l：定义使用的标准数学库；</span><br><span class="line">-w：对POSIX bc的扩展给出警告信息；</span><br><span class="line">-q：不打印正常的GNU bc环境信息；</span><br><span class="line">-v：显示指令版本信息；</span><br><span class="line">-h：显示指令的帮助信息。</span><br></pre></td></tr></table></figure><h2 id="计算加减乘除"><a href="#计算加减乘除" class="headerlink" title="计算加减乘除"></a>计算加减乘除</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@RedHat_test ~]# bc</span><br><span class="line">2+3</span><br><span class="line">5</span><br><span class="line">5-2</span><br><span class="line">3</span><br><span class="line">2+3*1</span><br><span class="line">5</span><br><span class="line">6/2</span><br><span class="line">3</span><br><span class="line"><span class="meta">#</span><span class="bash"> 输入 quit 退出</span></span><br></pre></td></tr></table></figure><h2 id="管道符输入"><a href="#管道符输入" class="headerlink" title="管道符输入"></a>管道符输入</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@RedHat_test ~]# echo "1.212*3" | bc </span><br><span class="line">3.636</span><br></pre></td></tr></table></figure><h2 id="设定小数精度"><a href="#设定小数精度" class="headerlink" title="设定小数精度"></a>设定小数精度</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@RedHat_test ~]# echo "scale=3;3/8" | bc</span><br><span class="line">.375</span><br><span class="line"><span class="meta">#</span><span class="bash">参数scale=3是将bc输出结果的小数位设置为3位</span></span><br></pre></td></tr></table></figure><h2 id="将十进制转换成二进制"><a href="#将十进制转换成二进制" class="headerlink" title="将十进制转换成二进制"></a>将十进制转换成二进制</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@RedHat_test ~]# #!/bin/bash</span><br><span class="line">[root@RedHat_test ~]# abc=11000000</span><br><span class="line">[root@RedHat_test ~]# echo "obase=10;ibase=2;$abc" | bc</span><br><span class="line">192</span><br></pre></td></tr></table></figure><h2 id="将十进制转十六进制"><a href="#将十进制转十六进制" class="headerlink" title="将十进制转十六进制"></a>将十进制转十六进制</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@RedHat_test ~]# m=31</span><br><span class="line">[root@RedHat_test ~]# n=$(echo "obase=16;$m"|bc)</span><br><span class="line">[root@RedHat_test ~]# echo $n</span><br><span class="line">1F</span><br></pre></td></tr></table></figure><h2 id="将十六进制转十进制"><a href="#将十六进制转十进制" class="headerlink" title="将十六进制转十进制"></a>将十六进制转十进制</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@RedHat_test ~]# m=1E</span><br><span class="line">[root@RedHat_test ~]# n=$(echo "obase=10;ibase=16;$m"|bc)</span><br><span class="line">[root@RedHat_test ~]# echo $n</span><br><span class="line">30</span><br></pre></td></tr></table></figure><h2 id="计算平方和平方根"><a href="#计算平方和平方根" class="headerlink" title="计算平方和平方根"></a>计算平方和平方根</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@RedHat_test ~]# echo "10^10" | bc</span><br><span class="line">10000000000</span><br><span class="line">[root@RedHat_test ~]# echo "sqrt(100)" | bc</span><br><span class="line">10</span><br></pre></td></tr></table></figure><h2 id="计算平均值"><a href="#计算平均值" class="headerlink" title="计算平均值"></a>计算平均值</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@RedHat_test ~]# cat script.sh </span><br><span class="line"><span class="meta">#</span><span class="bash">/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 計算兩個數的平均值</span></span><br><span class="line">ans=$(echo "($1 + $2) / 2" | bc -l)</span><br><span class="line">echo "平均為：$ans"</span><br><span class="line">[root@RedHat_test ~]# chmod +x script.sh</span><br><span class="line">[root@RedHat_test ~]# ./script.sh 12 34</span><br><span class="line">平均為：23.00000000000000000000</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux_command </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux_command </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rsyslog—日志及集中化管理</title>
      <link href="/2020/03/07/rsyslog-%E6%97%A5%E5%BF%97%E9%9B%86%E4%B8%AD%E5%8C%96%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/"/>
      <url>/2020/03/07/rsyslog-%E6%97%A5%E5%BF%97%E9%9B%86%E4%B8%AD%E5%8C%96%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>rsyslog 在Linux上自带，兼容syslog语法，在syslog基础上增加了更多协议的支持，配合额外module插件可以完成很多场景的使用。借用下官网的图片：</p><p><img src="640-3.jpeg" alt="rsyslog-日志集中化管理工具"></p><p>注： Windows 平台需要 nxlog （nxlog 是用C 语言写的一个跨平台日志收集处理软件）。</p><p>最近遇到一个需求，需要把线上环境的debug日志及集中化收集起来，一方面是方便开发调试；一方面是避免直接到线上环境查看，存在安全隐患。</p><h2 id="常用可选方案"><a href="#常用可选方案" class="headerlink" title="常用可选方案"></a>常用可选方案</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rsyslog发送端 + rsyslog接收端： 直接存在接收端的本地硬盘</span><br><span class="line"></span><br><span class="line">rsyslog发送端 + logstash接收端 + &lt;后续第三方处理&gt;： 接受到log更新行后，通过logstash简单处理后，可以继续往第三方处理，如放到ElasticSearch，或者放到消息队列Kfaka等</span><br><span class="line"></span><br><span class="line">rsyslog发送端 + Splunk： Splunk是商业软件，也是业内用的比较多的方式，价格不菲</span><br></pre></td></tr></table></figure><p>基本原理和处理流程都是类似的： 监控本地log文件内容的变化，然后把变化的文件内容发送到远端收集服务上。</p><p>例如常说的ELKstack（ElasticSearch+Logstash+Kibana）的第一步都是配置rsyslog发送端。</p><p>不管哪种方案都得监控本地文件的变化，rsyslog属于必选。我们需求比较简单，暂时选用了落地到本地盘，默认存储15天debug日志。</p><p>本文主要介绍rsyslog发送端、接收端的配置，以及遇到的一些坑。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在CentOS 6.8 Final 上自带的版本为 5.8.10。如需最新版本，可参考官网。</p><p> <a href="http://www.rsyslog.com" target="_blank" rel="noopener">http://www.rsyslog.com</a> </p><p>V5版本开发于2010年，属于比较旧的版本，最新版本是V8，支持了更多的字符串处理函数和更多module，当然性能也更好。</p><p>缺点是：新旧配置语法不兼容，而采用内置版本的另一个偷懒的好处是云端的镜像也不需要再额外升级，能支持更多老机器。</p><p>后面介绍以V5版本为例，如有不同的，会单独指出。</p><h2 id="配置文件介绍"><a href="#配置文件介绍" class="headerlink" title="配置文件介绍"></a>配置文件介绍</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/sbin/rsyslogd : 执行文件</span><br><span class="line"></span><br><span class="line">/etc/rsyslog.conf : 主配置文件:</span><br><span class="line"></span><br><span class="line">/etc/rsyslog.d/*.conf : 自定义配置文件</span><br><span class="line"></span><br><span class="line">/etc/init.d/rsyslog restart : 修改配置文件后，重启服务</span><br></pre></td></tr></table></figure><h2 id="一份配置文件主要包括以下几个部分"><a href="#一份配置文件主要包括以下几个部分" class="headerlink" title="一份配置文件主要包括以下几个部分"></a>一份配置文件主要包括以下几个部分</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MODULES</span><br><span class="line">RULES</span><br><span class="line">全局指令，模板，模块参数等</span><br></pre></td></tr></table></figure><p>自带的配置文件如下，参考后面的注释：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> rsyslog v5 configuration file</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> For more information see /usr/share/doc/rsyslog-*/rsyslog_conf.html</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> If you experience problems, see http://www.rsyslog.com/doc/troubleshoot.html</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">### MODULES #### # 模块放在开头加载</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">ModLoad imuxsock <span class="comment"># provides support for local system logging (e.g. via logger command) # 可以用来调试，稍后有例子</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">ModLoad imklog <span class="comment"># provides kernel logging support (previously done by rklogd)</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="variable">$ModLoad</span> immark <span class="comment"># provides --MARK-- message capability</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Provides UDP syslog reception</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="variable">$ModLoad</span> imudp</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="variable">$UDPServerRun</span> 514</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Provides TCP syslog reception <span class="comment"># TCP server，接收端需要加载这个模块，发送端不需要</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="variable">$ModLoad</span> imtcp</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="variable">$InputTCPServerRun</span> 514</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">### GLOBAL DIRECTIVES ####</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Use default timestamp format</span></span><br><span class="line"><span class="meta">$</span><span class="bash">ActionFileDefaultTemplate RSYSLOG_TraditionalFileFormat <span class="comment"># 消息格式</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> File syncing capability is disabled by default. This feature is usually not required,</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> not useful and an extreme performance hit</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="variable">$ActionFileEnableSync</span> on</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">### RULES #### # 用来指定哪种类型的，哪种级别的log，发送给谁处理</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Log all kernel messages to the console.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Logging much <span class="keyword">else</span> clutters up the screen.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> kern.* /dev/console</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Log anything (except mail) of level info or higher.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Don<span class="string">'t log private authentication messages!</span></span></span><br><span class="line">*.info;mail.none;authpriv.none;cron.none /var/log/messages</span><br><span class="line"><span class="meta">#</span><span class="bash"> The authpriv file has restricted access.</span></span><br><span class="line">authpriv.* /var/log/secure</span><br><span class="line"><span class="meta">#</span><span class="bash"> Log all the mail messages <span class="keyword">in</span> one place.</span></span><br><span class="line">mail.* -/var/log/maillog # '-' 表示异步</span><br><span class="line"><span class="meta">#</span><span class="bash"> Log cron stuff</span></span><br><span class="line">cron.* /var/log/cron</span><br><span class="line"><span class="meta">#</span><span class="bash"> Everybody gets emergency messages</span></span><br><span class="line">*.emerg *</span><br><span class="line"><span class="meta">#</span><span class="bash"> Save news errors of level crit and higher <span class="keyword">in</span> a special file.</span></span><br><span class="line">uucp,news.crit /var/log/spooler</span><br><span class="line"><span class="meta">#</span><span class="bash"> Save boot messages also to boot.log</span></span><br><span class="line">local7.* /var/log/boot.log # local开头的是自定义的日志类型</span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment">### begin forwarding rule ###</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> The statement between the begin ... end define a SINGLE forwarding</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> rule. They belong together, <span class="keyword">do</span> NOT split them. If you create multiple</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> forwarding rules, duplicate the whole block!</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Remote Logging (we use TCP <span class="keyword">for</span> reliable delivery)</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> An on-disk queue is created <span class="keyword">for</span> this action. If the remote host is</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> down, messages are spooled to disk and sent when it is up again.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="variable">$WorkDirectory</span> /var/lib/rsyslog <span class="comment"># where to place spool files</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="variable">$ActionQueueFileName</span> fwdRule1 <span class="comment"># unique name prefix for spool files</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="variable">$ActionQueueMaxDiskSpace</span> 1g <span class="comment"># 1gb space limit (use as much as possible)</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="variable">$ActionQueueSaveOnShutdown</span> on <span class="comment"># save messages to disk on shutdown</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="variable">$ActionQueueType</span> LinkedList <span class="comment"># run asynchronously</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="variable">$ActionResumeRetryCount</span> -1 <span class="comment"># infinite retries if host is down</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> remote host is: name/ip:port, e.g. 192.168.0.1:514, port optional</span></span><br><span class="line"><span class="meta">#</span><span class="bash">*.* @@remote-host:514</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment">### end of the forwarding rule ###</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Finally include all config files <span class="keyword">in</span> /etc/rsyslog.d. This allows overrides</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> of the default configuration above.</span></span><br><span class="line"><span class="meta">$</span><span class="bash">IncludeConfig /etc/rsyslog.d/*.conf <span class="comment"># 这里会自动加载自定义的*.conf配置文件，可以覆盖默认参数</span></span></span><br></pre></td></tr></table></figure><h2 id="模块-imfile"><a href="#模块-imfile" class="headerlink" title="模块 imfile"></a>模块 imfile</h2><p>为了完成我们的任务，除了上面默认的模块，还需要加载 imfile，,来指定监控哪些文件，参考文档。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">ModLoad imfile <span class="comment"># Load the imfile input module</span></span></span><br></pre></td></tr></table></figure><p>该模块把标准的文本文件转换成syslog的message格式， 所谓标准文本是指：保护可打印的字符，每行以 LF作为分隔符号。 支持文件正在在logrotate的时候，仍能正确处理。</p><p>它会把监控文件的读取到哪一个位置（类似游标cursor），存储在state文件里（由 $WorkDirectory 指定）。</p><p>该模块支持如下指令，一组如下设置，可以称为一个 <strong>listener</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">InputFileName /path/to/file <span class="comment"># 待监控的文件路径</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">InputFileTag tag <span class="comment"># 文件唯一标识tag，最好保持唯一，用于接收端区分原始log文件，可以包含特殊字符，如":"、","等</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">InputFileStateFile /path/to/state/file</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 【重要】需要保证发送端唯一，记录读取到哪儿，状态文件保存在<span class="variable">$WorkDirectory</span>，默认为 /var/lib/rsyslog</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果某个要监控的文件名变化了，一定要重新设置该值</span></span><br><span class="line"><span class="meta">$</span><span class="bash">InputFileFacility facility <span class="comment"># log类型，默认local0， local开头的表示自定义类型</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">InputFileSeverity severity <span class="comment"># log级别：info，warning，默认notice</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">InputRunFileMonitor <span class="comment"># 启动监控当前的文件，如果忘记这行，则啥事也不会发生</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">InputFilePollInterval seconds <span class="comment"># 全局设置，默认轮询是10s</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">InputFilePersistStateInterval lines <span class="comment"># 每多少行更新state文件状态</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">InputFileReadMode mode <span class="comment"># 官网竟然没这个解释，不过也没用到。。。</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">InputFileMaxLinesAtOnce number</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 默认10240，如果在发送端，需要同时监控多个文件，会处理完当前文件特定行后，切换到下一个文件，避免一个文件一直占用处理，导致收集别的文件不及时。</span></span><br><span class="line"><span class="meta">$</span><span class="bash">InputFileBindRuleset ruleset <span class="comment"># 属于较高级的设置，可以把这个listener绑定到特点的规则(http://www.rsyslog.com/doc/v5-stable/concepts/multi_ruleset.html)</span></span></span><br></pre></td></tr></table></figure><p>接收端配置，注意tag里的逗号 <strong>‘,’</strong>，稍后在接收端，会它来分隔：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> For product, total 19 files.</span></span><br><span class="line"><span class="meta">$</span><span class="bash">InputFileName /Data/logs/product/cache-Statistic.log</span></span><br><span class="line"><span class="meta">$</span><span class="bash">InputFileTag product,cache-Statistic</span></span><br><span class="line"><span class="meta">$</span><span class="bash">InputFileSeverity info</span></span><br><span class="line"><span class="meta">$</span><span class="bash">InputFileStateFile state_product_cache-Statistic</span></span><br><span class="line"><span class="meta">$</span><span class="bash">InputFilePersistStateInterval 25000</span></span><br><span class="line"><span class="meta">$</span><span class="bash">InputFileFacility local5</span></span><br><span class="line"><span class="meta">$</span><span class="bash">InputRunFileMonitor</span></span><br></pre></td></tr></table></figure><h2 id="Rule-设置"><a href="#Rule-设置" class="headerlink" title="Rule 设置"></a>Rule 设置</h2><p>一条rule的语法格式如： <Facility>.<Severity> <Target></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Log cron stuff</span></span><br><span class="line">cron.* /var/log/cron</span><br><span class="line"><span class="meta">#</span><span class="bash"> 记录info到本地messages文件，.none 结尾表示排除掉这些文件类型。</span></span><br><span class="line">*.info;mail.none;authpriv.none;cron.none /var/log/messages</span><br><span class="line"><span class="meta">#</span><span class="bash"> 所有为local5的任意级别日志发送到远端514</span></span><br><span class="line">local5.* @@192.168.56.10:514</span><br></pre></td></tr></table></figure><h2 id="Facility"><a href="#Facility" class="headerlink" title="Facility"></a>Facility</h2><p>日志设备(可以理解为日志类型):</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">auth #pam产生的日志，认证日志</span><br><span class="line">authpriv #ssh,ftp等登录信息的验证信息，认证授权认证</span><br><span class="line">cron #时间任务相关</span><br><span class="line">kern #内核</span><br><span class="line">lpr #打印</span><br><span class="line">mail #邮件</span><br><span class="line">mark(syslog) #rsyslog服务内部的信息,时间标识</span><br><span class="line">news #新闻组</span><br><span class="line">user #用户程序产生的相关信息</span><br><span class="line">uucp #unix to unix copy, unix主机之间相关的通讯</span><br><span class="line">local 1~7 #自定义的日志设备</span><br></pre></td></tr></table></figure><h2 id="Severity"><a href="#Severity" class="headerlink" title="Severity"></a>Severity</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">debug #有调式信息的，日志信息最多</span><br><span class="line">info #一般信息的日志，最常用</span><br><span class="line">notice #最具有重要性的普通条件的信息</span><br><span class="line">warning, warn #警告级别</span><br><span class="line">err, error #错误级别，阻止某个功能或者模块不能正常工作的信息</span><br><span class="line">crit #严重级别，阻止整个系统或者整个软件不能正常工作的信息</span><br><span class="line">alert #需要立刻修改的信息</span><br><span class="line">emerg, panic #内核崩溃等严重信息</span><br></pre></td></tr></table></figure><h2 id="Target"><a href="#Target" class="headerlink" title="Target"></a>Target</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">文件： /var/log/messages</span><br><span class="line"></span><br><span class="line">用户： root，*（表示所有用户）， 会发到/var/spool/mail/收件箱里</span><br><span class="line"></span><br><span class="line">日志服务器： @192.168.56.10 或者 @@192.168.56.10</span><br><span class="line"></span><br><span class="line">管道： | COMMAND</span><br><span class="line"></span><br><span class="line">一个 @ 表示 UDP, 两个 @@ 表示 TCP 协议。</span><br></pre></td></tr></table></figure><h2 id="模板-template"><a href="#模板-template" class="headerlink" title="模板$template"></a>模板$template</h2><p>模板 $template， 最主要的一个指令，在 接收端 可用来定义消息格式、文件名。主要是在接收端使用。</p><p>可参考 官方文档Templates</p><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">template &lt;name&gt;,&lt;内容&gt;,&lt;可选项&gt;</span></span><br><span class="line"><span class="meta">$</span><span class="bash">template MyTemplateName,<span class="string">"\7Text %property% some more text\n"</span>,&lt;options&gt;</span></span><br></pre></td></tr></table></figure><p>默认的消息格式 RSYSLOG_TraditionalFileFormat</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;接收内容的时间&gt; &lt;发送者的hostname&gt; &lt;$InputFileTag&gt; &lt;原始消息%msg%&gt;</span><br><span class="line">Dec 18 20:39:27 jumper-172-31-56-18 karltestdemoTag blala... dummy msg</span><br></pre></td></tr></table></figure><p>如果只需要显示原始消息，可设置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">template CleanMsgFormat,<span class="string">"%msg%\n"</span></span></span><br></pre></td></tr></table></figure><h2 id="内置属性-Properties"><a href="#内置属性-Properties" class="headerlink" title="内置属性 Properties"></a>内置属性 Properties</h2><p>模板里支持一些 内置的变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash">msg%</span></span><br><span class="line"><span class="meta">%</span><span class="bash">syslogfacility%</span></span><br><span class="line"><span class="meta">%</span><span class="bash">HOSTNAME%</span></span><br><span class="line"><span class="meta">%</span><span class="bash">syslogpriority%</span></span><br><span class="line"><span class="meta">%</span><span class="bash">timereported:::date-mysql%</span></span><br><span class="line"><span class="meta">%</span><span class="bash">timegenerated:::date-mysql%</span></span><br><span class="line"><span class="meta">%</span><span class="bash">iut%</span></span><br><span class="line">'%syslogtag%'</span><br></pre></td></tr></table></figure><h2 id="属性处理-Property-Replacer"><a href="#属性处理-Property-Replacer" class="headerlink" title="属性处理 Property Replacer"></a>属性处理 Property Replacer</h2><p>Property Replacer 用来处理变量，支持一些简单的字符串处理，如大小写，substring等，类似jinja2的filter概念。</p><p>版本越新支持的处理函数越强大。</p><p>语法： </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash">property:fromChar:toChar:options%</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> For product</span></span><br><span class="line"><span class="meta">$</span><span class="bash">template productFileFormat,<span class="string">"/Data/logs/product/%fromhost-ip%/%syslogtag:F,44:2%-%<span class="variable">$YEAR</span>%%<span class="variable">$MONTH</span>%%<span class="variable">$DAY</span>%.log"</span></span></span><br><span class="line">if $syslogtag startswith 'product' then ?productFileFormat;CleanMsgFormat</span><br><span class="line">&amp; ~</span><br></pre></td></tr></table></figure><p>上面的例子，在接收端会保存为 /Data/logs/product/198.168.56.123/karltest_demo-20161218.log</p><p>解释下这个指令%syslogtag:F,44:2%</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">F : - 代表自定义一个分隔符</span><br><span class="line"></span><br><span class="line">44 : - 是逗号 , 的 ASCII 码值，如需要别的分隔符，需要查对应 ASCII 值</span><br><span class="line"></span><br><span class="line">2 : - 取分隔后的第二个字段</span><br></pre></td></tr></table></figure><p>所以就是： 假设发送端自定义的tag为 $InputFileTag product,karltest_demo，</p><p>如果tag以product开始，则取出逗号分隔的第二个字段作为保存的文件名，这也是为啥上面tag里要设置一个逗号的缘故。</p><p>另外，还支持一定的 regex 语法，可以进行更高级的控制。官方提供了一个在线的 regex 语法测试。</p><p><em>友情提醒：真的很难用。。。</em></p><h2 id="停止指令"><a href="#停止指令" class="headerlink" title="停止指令"></a>停止指令</h2><p>上面的接收端，在一条规则后，加上了如下的指令（也叫停止指令），代表如果log被当前的rule已经处理过了，则完成本次执行，跳过后续rule的处理。 类似 C++里 switch/case，如果忘记加break的穿透副作用。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp; ~</span><br></pre></td></tr></table></figure><p>如果没有这个指令，则一条新来的消息可以被多个rule处理。 这里我们并不需要，只要命中就保存到接收端同名的文件里。</p><h2 id="发送端配置"><a href="#发送端配置" class="headerlink" title="发送端配置"></a>发送端配置</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 加载 imfile 模块</span><br><span class="line">2. 指定要监控的 log 文件路径，设置合适的tag</span><br><span class="line">3. 指定远端的接收端的地址</span><br></pre></td></tr></table></figure><p>完整配置： /etc/rsyslog.conf 和 /etc/rsyslog.d/product.conf</p><h2 id="接收端配置"><a href="#接收端配置" class="headerlink" title="接收端配置"></a>接收端配置</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 加载 imtcp 模块</span><br><span class="line">2. 设置 message 格式</span><br><span class="line">3. 设置 文件存储路径，文件名格式</span><br></pre></td></tr></table></figure><p>完整配置： /etc/rsyslog.conf</p><h2 id="遇到的坑"><a href="#遇到的坑" class="headerlink" title="遇到的坑"></a>遇到的坑</h2><h3 id="UDP-or-TCP"><a href="#UDP-or-TCP" class="headerlink" title="UDP or TCP ?"></a>UDP or TCP ?</h3><p>一般来说选择TCP都是OK的，除非忍受部分丢失，在意影响性能，可以改用UDP。</p><p>但是注意：如果你的消息每行大小超过了4k，只能用TCP。这是因为UDP栈大小限制的。</p><p>引用官方有关 MaxMessageSize 的描述：</p><blockquote><p>Note: testing showed that 4k seems to be the typical maximum for UDP based syslog. This is an IP stack restriction. Not always … but very often. If you go beyond that value, be sure to test that rsyslogd actually does what you think it should do ;) It is highly suggested to use a TCP based transport instead of UDP (plain TCP syslog, RELP). This resolves the UDP stack size restrictions.</p></blockquote><h3 id="如何测试：-vim-vs-echo"><a href="#如何测试：-vim-vs-echo" class="headerlink" title="如何测试： vim vs echo ?"></a>如何测试： vim vs echo ?</h3><p>配置好接收端、发送端rsyslog后，需要验证下是否能正确传送新的log行。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. echo追加： echo "dummy message" &gt;&gt; /Data/logs/product/karltest.log</span><br><span class="line">2. vim编辑： vim /Data/logs/product/karltest.log</span><br></pre></td></tr></table></figure><p>用vim编辑后，保存会刷新整个文件，导致rsyslog在比较state file的时候，认为全部是新增的行，会在接收端出现重复的log行。</p><p>所以正确测试方法是用 echo 追加的方式。</p><blockquote><p>Tips:</p><p>发送端：可以配合 watch 来测试： watch -n 1 “ echo $(date) dummy message &gt;&gt; /Data/logs/product/karltest.log “</p><p>接收端： tailf /Data/logs/karltest/karltest.log</p></blockquote><h3 id="接收端：log行太长，被截断了"><a href="#接收端：log行太长，被截断了" class="headerlink" title="接收端：log行太长，被截断了"></a>接收端：log行太长，被截断了</h3><p>默认大小是2k，大概可以保存1000个中文字符，参考官方说明 $MaxMessageSize， 最小也是2k。</p><p>在加载imtcp/imudp之前设置， 此配置包括发送和接收，所以rsyslog客户端、服务端都要设置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">MaxMessageSize 32k</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Provides TCP syslog reception</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="variable">$ModLoad</span> imtcp</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="variable">$InputTCPServerRun</span> 514</span></span><br></pre></td></tr></table></figure><h3 id="发送端：-var-log-messages-文件变大"><a href="#发送端：-var-log-messages-文件变大" class="headerlink" title="发送端：/var/log/messages 文件变大"></a>发送端：/var/log/messages 文件变大</h3><p>log除了发送到了接收端，还在本地 /var/log/messages 里重复出现了，导致messages上G</p><p>罪魁祸首是默认的配置文件如下这行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 修改前</span></span><br><span class="line">*.info;mail.none;authpriv.none;cron.none /var/log/messages</span><br><span class="line"><span class="meta">#</span><span class="bash"> Fix后</span></span><br><span class="line">*.info;mail.none;authpriv.none;cron.none;local5.none;local6.none /var/log/messages</span><br></pre></td></tr></table></figure><p>因为前面有通配符 *.info 导致我们自定义的 local5.info 也会写到本地messages文件。</p><p>为了保险，请把接收端、发送端的配置文件都修改掉，忽略掉local5。</p><h3 id="接收端：消息被多个rule处理"><a href="#接收端：消息被多个rule处理" class="headerlink" title="接收端：消息被多个rule处理"></a>接收端：消息被多个rule处理</h3><p>在命中某条rule后，直接break停止</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if $syslogtag startswith 'product' then ?productFileFormat;CleanMsgFormat</span><br><span class="line">&amp; ~</span><br><span class="line"><span class="meta">#</span><span class="bash"> 新版本v6之后，变为：</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> rsyslogd: warning: ~ action is deprecated, consider using the <span class="string">'stop'</span> statement instead [try http://www.rsyslog.com/e/2307 ]</span></span><br><span class="line">if $syslogtag startswith 'product' then ?productFileFormat;CleanMsgFormat</span><br><span class="line">stop</span><br></pre></td></tr></table></figure><h3 id="接收端：-保存的文件路径不对"><a href="#接收端：-保存的文件路径不对" class="headerlink" title="接收端： 保存的文件路径不对"></a>接收端： 保存的文件路径不对</h3><p>要注意自定义tag的前缀匹配，如果两个tag有共同的前缀，需要把长的放在前面，调整好顺序。</p><p>Fix 前：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> For erp_wms</span></span><br><span class="line"><span class="meta">$</span><span class="bash">template erp_wms_FileFormat,<span class="string">"/Data/logs/erp/wms/%fromhost-ip%/%syslogtag:F,44:2%-%<span class="variable">$YEAR</span>%%<span class="variable">$MONTH</span>%%<span class="variable">$DAY</span>%.log"</span></span></span><br><span class="line">if $syslogtag startswith 'erp_wms' then ?erp_wms_FileFormat;CleanMsgFormat</span><br><span class="line">&amp; ~</span><br><span class="line"><span class="meta">#</span><span class="bash"> For erp_wms3</span></span><br><span class="line"><span class="meta">$</span><span class="bash">template erp_wms3_FileFormat,<span class="string">"/Data/logs/erp/wms3/%fromhost-ip%/%syslogtag:F,44:2%-%<span class="variable">$YEAR</span>%%<span class="variable">$MONTH</span>%%<span class="variable">$DAY</span>%.log"</span></span></span><br><span class="line">if $syslogtag startswith 'erp_wms3' then ?erp_wms3_FileFormat;CleanMsgFormat</span><br><span class="line">&amp; ~</span><br></pre></td></tr></table></figure><p>Fix 后：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 这里注意下面的tag的顺序， 一定要让长的tag（erp_wms3）保持在上面，因为他们有共同的前缀(erp_wms)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> For erp_wms3</span></span><br><span class="line"><span class="meta">$</span><span class="bash">template erp_wms3_FileFormat,<span class="string">"/Data/logs/erp/wms3/%fromhost-ip%/%syslogtag:F,44:2%-%<span class="variable">$YEAR</span>%%<span class="variable">$MONTH</span>%%<span class="variable">$DAY</span>%.log"</span></span></span><br><span class="line">if $syslogtag startswith 'erp_wms3' then ?erp_wms3_FileFormat;CleanMsgFormat</span><br><span class="line">&amp; ~</span><br><span class="line"><span class="meta">#</span><span class="bash"> For erp_wms</span></span><br><span class="line"><span class="meta">$</span><span class="bash">template erp_wms_FileFormat,<span class="string">"/Data/logs/erp/wms/%fromhost-ip%/%syslogtag:F,44:2%-%<span class="variable">$YEAR</span>%%<span class="variable">$MONTH</span>%%<span class="variable">$DAY</span>%.log"</span></span></span><br><span class="line">if $syslogtag startswith 'erp_wms' then ?erp_wms_FileFormat;CleanMsgFormat</span><br><span class="line">&amp; ~</span><br></pre></td></tr></table></figure><h3 id="接收端：-rsyslog-文件名太长后被截断"><a href="#接收端：-rsyslog-文件名太长后被截断" class="headerlink" title="接收端： rsyslog 文件名太长后被截断"></a>接收端： rsyslog 文件名太长后被截断</h3><p>比如发送端原始文件名tag: product，cache_status_im_request.log</p><p>但是到了接收端就截断了： cache_status_im_re-20161218.log</p><p>因为本来名字就长，加上了时间后更长了，</p><p>个人理解，Linux中关于文件名（255），文件路径（4096）的限制如下，而在接收端，都没有超过这个长度。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat /usr/include/linux/limits.h</span></span><br><span class="line"><span class="meta">#</span><span class="bash">ifndef _LINUX_LIMITS_H</span></span><br><span class="line"><span class="meta">#</span><span class="bash">define _LINUX_LIMITS_H</span></span><br><span class="line"><span class="meta">#</span><span class="bash">define NR_OPEN         1024</span></span><br><span class="line"><span class="meta">#</span><span class="bash">define NGROUPS_MAX    65536    /* supplemental group IDs are available */</span></span><br><span class="line"><span class="meta">#</span><span class="bash">define ARG_MAX       131072    /* <span class="comment"># bytes of args + environ for exec() */</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">define LINK_MAX         127    /* <span class="comment"># links a file may have */</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">define MAX_CANON        255    /* size of the canonical input queue */</span></span><br><span class="line"><span class="meta">#</span><span class="bash">define MAX_INPUT        255    /* size of the <span class="built_in">type</span>-ahead buffer */</span></span><br><span class="line"><span class="meta">#</span><span class="bash">define NAME_MAX         255    /* <span class="comment"># chars in a file name */</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">define PATH_MAX        4096    /* <span class="comment"># chars in a path name including nul */</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">define PIPE_BUF        4096    /* <span class="comment"># bytes in atomic write to a pipe */</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">define XATTR_NAME_MAX   255    /* <span class="comment"># chars in an extended attribute name */</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">define XATTR_SIZE_MAX 65536    /* size of an extended attribute value (64k) */</span></span><br><span class="line"><span class="meta">#</span><span class="bash">define XATTR_LIST_MAX 65536    /* size of extended attribute namelist (64k) */</span></span><br><span class="line"><span class="meta">#</span><span class="bash">define RTSIG_MAX         32</span></span><br><span class="line"><span class="meta">#</span><span class="bash">endif</span></span><br></pre></td></tr></table></figure><p>进过一番艰难的测试复现，猜测是 $InputFileTag 这个 %syslogtag%的原因。</p><p>官方解释Sending messages with tags larger than 32 characters。</p><p>发送端默认的模板为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 忽略旧的5.8.6的语法</span></span><br><span class="line">template (name="ForwardFormat" type="string" string="&lt;%PRI%&gt;%TIMESTAMP:::date-rfc3339% %HOSTNAME%</span><br><span class="line"><span class="meta">%</span><span class="bash">syslogtag:1:32%%msg:::sp-if-no-1st-sp%%msg%<span class="string">")</span></span></span><br></pre></td></tr></table></figure><p>可以看到 %syslogtag:1:32%，被截断到32字符，这个也与我测试的结果一致。</p><p>所以如果需要处理更长的tag，需要修改 发送端的template模板，去掉 :1:32 限制。</p><p>然后绑定这个模板到对应的target上。</p><p>注意：接收端可能也要相应处理，才能handle更长的tag名（未测试）。</p><blockquote><p>免责声明：由于折腾这个rsyslog太累，最后一条暂时没有Fix，如有需要，请自行测试后再用。</p></blockquote><h3 id="如下的两个-syslogtag-，由于前32个字符都相同，导致最后日志写到同一个文件-databas-log-按照逗号切割后-了"><a href="#如下的两个-syslogtag-，由于前32个字符都相同，导致最后日志写到同一个文件-databas-log-按照逗号切割后-了" class="headerlink" title="如下的两个%syslogtag%，由于前32个字符都相同，导致最后日志写到同一个文件 databas.log (按照逗号切割后)了"></a>如下的两个%syslogtag%，由于前32个字符都相同，导致最后日志写到同一个文件 databas.log (按照逗号切割后)了</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">InputFileName /Data/logs/mqorder/order-mq-aws/database-stat.log</span></span><br><span class="line"><span class="meta">$</span><span class="bash">InputFileTag erp_mqorder-order-mq-aws,database-stat <span class="comment"># 长度39</span></span></span><br><span class="line">...</span><br><span class="line"><span class="meta">$</span><span class="bash">InputFileName /Data/logs/mqorder/order-mq-aws/database-timeout.log</span></span><br><span class="line"><span class="meta">$</span><span class="bash">InputFileTag erp_mqorder-order-mq-aws,database-timeout <span class="comment"># 长度42</span></span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="解决方法-："><a href="#解决方法-：" class="headerlink" title="解决方法 ："></a>解决方法 ：</h3><p>在发送端的主配置文件 /etc/rsyslog.conf里修改发送规则：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment">### begin forwarding rule ###</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">template LongTagForwardFormat,<span class="string">"&lt;%PRI%&gt;%TIMESTAMP:::date-rfc3339% %HOSTNAME% %syslogtag%%msg:::sp-if-no-1st-sp%%msg%"</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">WorkDirectory /var/lib/rsyslog <span class="comment"># where to place spool files</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">ActionQueueFileName karlzhou_fwdRule <span class="comment"># unique name prefix for spool files</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">ActionQueueMaxDiskSpace 5g <span class="comment"># 5gb space limit (use as much as possible)</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">ActionQueueSaveOnShutdown on <span class="comment"># save messages to disk on shutdown</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">ActionQueueType LinkedList <span class="comment"># run asynchronously</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">ActionResumeRetryCount -1 <span class="comment"># infinite retries if host is down</span></span></span><br><span class="line">local5.* @@rsyslog.karlzhou.org:514;LongTagForwardFormat</span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment">### end of the forwarding rule ###</span></span></span><br></pre></td></tr></table></figure><p>其中起作用的就是 LongTagForwardFormat 这个模板。</p><h3 id="解决过程-："><a href="#解决过程-：" class="headerlink" title="解决过程 ："></a>解决过程 ：</h3><p>参考了上面的链接: 官方解释Sending messages with tags larger than 32 characters 和 tag getting truncated。</p><p>官方解释里是 5.8.6 的旧的语法，而CentOS6.x Final上自带的是 5.8.10， 语法不一样。</p><p>从官网下载5.8.10的源码: <a href="http://www.rsyslog.com/files/download/rsyslog/rsyslog-5.8.10.tar.gz" target="_blank" rel="noopener">http://www.rsyslog.com/files/download/rsyslog/rsyslog-5.8.10.tar.gz</a></p><p>全文搜索关键字 %syslogtag， 最终在如下几个文件找到蛛丝马迹：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">rsyslog-5.8.10/tools/smfwd.c</span><br><span class="line"></span><br><span class="line">rsyslog-5.8.10/tools/smtradfile.c</span><br><span class="line"></span><br><span class="line">rsyslog-5.8.10/tools/smtradfwd.c</span><br><span class="line"></span><br><span class="line">rsyslog-5.8.10/tools/syslogd.c</span><br><span class="line"></span><br><span class="line">全文搜索关键字 ForwardFormat:</span><br><span class="line"></span><br><span class="line">rsyslog-5.8.10/tools/syslogd.c</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/* hardcoded standard templates (used for defaults) */</span><br><span class="line">static uchar template_DebugFormat[] = "\"Debug line with all properties:\nFROMHOST: '%FROMHOST%', fromhost-ip: '%fromhost-ip%', HOSTNAME: '%HOSTNAME%', PRI: %PRI%,\nsyslogtag '%syslogtag%', programname: '%programname%', APP-NAME: '%APP-NAME%', PROCID: '%PROCID%', MSGID: '%MSGID%',\nTIMESTAMP: '%TIMESTAMP%', STRUCTURED-DATA: '%STRUCTURED-DATA%',\nmsg: '%msg%'\nescaped msg: '%msg:::drop-cc%'\ninputname: %inputname% rawmsg: '%rawmsg%'\n\n\"";</span><br><span class="line">static uchar template_SyslogProtocol23Format[] = "\"&lt;%PRI%&gt;1 %TIMESTAMP:::date-rfc3339% %HOSTNAME% %APP-NAME% %PROCID% %MSGID% %STRUCTURED-DATA% %msg%\n\"";</span><br><span class="line">static uchar template_TraditionalFileFormat[] = "=RSYSLOG_TraditionalFileFormat";</span><br><span class="line">static uchar template_FileFormat[] = "=RSYSLOG_FileFormat";</span><br><span class="line">static uchar template_ForwardFormat[] = "=RSYSLOG_ForwardFormat";</span><br><span class="line">static uchar template_TraditionalForwardFormat[] = "=RSYSLOG_TraditionalForwardFormat";</span><br><span class="line">static uchar template_WallFmt[] = "\"\r\n\7Message from syslogd@%HOSTNAME% at %timegenerated% ...\r\n %syslogtag%%msg%\n\r\"";</span><br><span class="line">static uchar template_StdUsrMsgFmt[] = "\" %syslogtag%%msg%\n\r\"";</span><br><span class="line">static uchar template_StdDBFmt[] = "\"insert into SystemEvents (Message, Facility, FromHost, Priority, DeviceReportedTime, ReceivedAt, InfoUnitID, SysLogTag) values ('%msg%', %syslogfacility%, '%HOSTNAME%', %syslogpriority%, '%timereported:::date-mysql%', '%timegenerated:::date-mysql%', %iut%, '%syslogtag%')\",SQL";</span><br><span class="line">static uchar template_StdPgSQLFmt[] = "\"insert into SystemEvents (Message, Facility, FromHost, Priority, DeviceReportedTime, ReceivedAt, InfoUnitID, SysLogTag) values ('%msg%', %syslogfacility%, '%HOSTNAME%', %syslogpriority%, '%timereported:::date-pgsql%', '%timegenerated:::date-pgsql%', %iut%, '%syslogtag%')\",STDSQL";</span><br><span class="line">static uchar template_spoofadr[] = "\"%fromhost-ip%\"";</span><br><span class="line">/* end templates */</span><br></pre></td></tr></table></figure><p>正如官网链接所说，源码里 hardcoded 里多个默认模板格式，</p><p>其中我们需要关注的就是 RSYSLOG_ForwardFormat, 对应的文件即：rsyslog-5.8.10/tools/smfwd.c。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/* smfwd.c</span><br><span class="line">* This is a strgen module for the traditional (network) forwarding format.</span><br><span class="line">*</span><br><span class="line">* Format generated:</span><br><span class="line">* "&lt;%PRI%&gt;%TIMESTAMP:::date-rfc3339% %HOSTNAME% %syslogtag:1:32%%msg:::sp-if-no-1st-sp%%msg%"</span><br><span class="line">*</span><br><span class="line">* NOTE: read comments in module-template.h to understand how this file</span><br><span class="line">* works!</span><br><span class="line">*</span><br><span class="line">* File begun on 2010-06-01 by RGerhards</span><br><span class="line">*</span><br></pre></td></tr></table></figure><p>这里，就能找到我们需要的正确的默认格式了, 可以看到 %syslogtag% 截取了前面32个字符，把ForwardFormat规则替换成完整的 %syslogtag% 即可，注意：最大的长度是512。</p><h3 id="接下来……"><a href="#接下来……" class="headerlink" title="接下来……"></a>接下来……</h3><p>通过一番设置，我们已经能成功收集若干台线上机器的日志了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> tree -I <span class="string">"*gz|*log"</span> /Data/logs/</span></span><br><span class="line">/Data/logs/</span><br><span class="line">├── gateway</span><br><span class="line">│   ├── 172.31.70.18</span><br><span class="line">│   │   └── archived</span><br><span class="line">│   ├── 172.31.70.19</span><br><span class="line">│   │   └── archived</span><br><span class="line">│   ├── 172.31.70.195</span><br><span class="line">│   │   └── archived</span><br><span class="line">│   ├── 172.31.70.197</span><br><span class="line">│   │   └── archived</span><br><span class="line">│   ├── 172.31.70.198</span><br><span class="line">│   │   └── archived</span><br><span class="line">│   └── 172.31.70.20</span><br><span class="line">│   └── archived</span><br><span class="line">├── product</span><br><span class="line">│   ├── 172.31.70.118</span><br><span class="line">│   │   └── archived</span><br><span class="line">│   ├── 172.31.70.119</span><br><span class="line">│   │   └── archived</span><br><span class="line">│   ├── 172.31.70.23</span><br><span class="line">│   │   └── archived</span><br><span class="line">│   └── 172.31.70.24</span><br><span class="line">│   └── archived</span><br><span class="line">...</span><br><span class="line"><span class="meta">#</span><span class="bash"> du -sh /Data/logs</span></span><br><span class="line">271G /Data/logs</span><br></pre></td></tr></table></figure><p>那么问题来了：</p><blockquote><p>上百台机器的上几百G的日志，怎么才能避免接收端硬盘爆掉？</p></blockquote><p>得用另一个Linux自带的脚本 /usr/sbin/logrotate, 来配合 rsyslog。</p>]]></content>
      
      
      <categories>
          
          <category> Linux_command </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux_command </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7-系统进程管理</title>
      <link href="/2020/03/05/Centos-%E7%B3%BB%E7%BB%9F%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/"/>
      <url>/2020/03/05/Centos-%E7%B3%BB%E7%BB%9F%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><strong>进程是已启动的可执行程序的运行实例，进程有以下组成部分：</strong>   </p><p><strong>已分配内存的地址空间；</strong>   </p><p><strong>安全属性，包括所有权凭据和特权；</strong>   </p><p><strong>程序代码的一个或多个执行线程；</strong>   </p><p><strong>进程状态</strong></p><p><strong>程序：</strong> 二进制文件，静态 /bin/date, /usr/sbin/httpd，/usr/sbin/sshd, /usr/local/nginx/sbin/nginx 。</p><p><strong>进程：</strong> 是程序运行的过程， 动态，有生命周期及运行状态。</p><h2 id="进程的生命周期"><a href="#进程的生命周期" class="headerlink" title="进程的生命周期"></a>进程的生命周期</h2><p><img src="640.png" alt="Centos7-系统进程管理"></p><p><strong>描述如下：</strong></p><p>父进程复制自己的地址空间（fork  <strong>[fɔ:k]</strong> 分叉）创建一个新的（子）进程结构。每个新进程分配一个唯一的进程 ID （PID），满足跟踪安全性之需。PID 和 父进程 ID （PPID）是子进程环境的元素，任何进程都可以创建子进程，所有进程都是第一个系统进程的后代。</p><p><strong>centos5或6PID为1的进程是：</strong>init   </p><p><strong>centos7 PID为1的进程是：</strong>systemd</p><p><strong>僵尸进程：</strong>一个进程使用fork创建子进程，如果子进程退出，而父进程并没有调用wait或waitpid获取子进程的状态信息，那么子进程的进程描述符仍然保存在系统中。这种进程称之为僵尸进程。</p><p><strong>用自己的话表达</strong>:父进程退出了，子进程没有退出， 那么这些子进程就没有父进程来管理了，就变成僵尸进程。</p><h2 id="进程的属性"><a href="#进程的属性" class="headerlink" title="进程的属性"></a>进程的属性</h2><p><strong>进程ID（PID)：</strong>是唯一的数值，用来区分进程</p><p><strong>父进程的ID（PPID)</strong></p><p><strong>启动进程的用户ID</strong>（UID）和所归属的组（GID）</p><p><strong>进程状态：</strong>状态分为运行R、休眠S、僵尸Z</p><p><strong>进程执行的优先级</strong></p><p><strong>进程所连接的终端名</strong></p><p><strong>进程资源占用：</strong>比如占用资源大小（内存、CPU占用量）</p><h2 id="使用ps查看进程工具"><a href="#使用ps查看进程工具" class="headerlink" title="使用ps查看进程工具"></a>使用ps查看进程工具</h2><h3 id="常用的参数："><a href="#常用的参数：" class="headerlink" title="常用的参数："></a>常用的参数：</h3><p><strong>a:</strong> <strong>显示跟当前终端关联的所有进程</strong></p><p><strong>u:</strong> <strong>基于用户的格式显示（</strong>U: 显示某用户ID所有的进程）</p><p><strong>x:</strong> <strong>显示所有进程，不以终端机来区分</strong></p><h3 id="常用的选项组合"><a href="#常用的选项组合" class="headerlink" title="常用的选项组合"></a>常用的选项组合</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">[root@docker-01 ~]# ps -aux|more  ##是用BSD的格式来显示进程</span><br><span class="line">USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND</span><br><span class="line">root         1  0.0  0.0 128148  6684 ?        Ss   11月01   0:09 /usr/lib/syste</span><br><span class="line">md/systemd --switched-root --system --deserialize 22</span><br><span class="line">root         2  0.0  0.0      0     0 ?        S    11月01   0:00 [kthreadd]</span><br><span class="line">root         3  0.0  0.0      0     0 ?        S    11月01   0:00 [ksoftirqd/0]</span><br><span class="line">root         5  0.0  0.0      0     0 ?        S&lt;   11月01   0:00 [kworker/0:0H]</span><br><span class="line">root         6  0.0  0.0      0     0 ?        S    11月01   0:00 [kworker/u8:0]</span><br><span class="line">root         7  0.0  0.0      0     0 ?        S    11月01   0:00 [migration/0]</span><br><span class="line">root         8  0.0  0.0      0     0 ?        S    11月01   0:00 [rcu_bh]</span><br><span class="line">root         9  0.0  0.0      0     0 ?        S    11月01   0:12 [rcu_sched]</span><br><span class="line">root        10  0.0  0.0      0     0 ?        S&lt;   11月01   0:00 [lru-add-drain</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#包含的信息如下</span></span></span><br><span class="line">USER:      运行进程的用户</span><br><span class="line">PID：      进程ID</span><br><span class="line"><span class="meta">%</span><span class="bash">CPU:  　　CPU占用率</span></span><br><span class="line"><span class="meta">%</span><span class="bash">MEM:      内存占用率</span></span><br><span class="line">VSZ：      占用虚拟内存</span><br><span class="line">RSS:       占用实际内存 驻留内存</span><br><span class="line">TTY：      进程运行的终端</span><br><span class="line">STAT：     进程状态     man ps (/STATE)            </span><br><span class="line">      R     运行</span><br><span class="line">      S     可中断睡眠 Sleep</span><br><span class="line">      D     不可中断睡眠</span><br><span class="line">      T     停止的进程 </span><br><span class="line">      Z     僵尸进程</span><br><span class="line">      X     死掉的进程</span><br><span class="line">      </span><br><span class="line">      Ss     s进程的领导者，父进程</span><br><span class="line">      S&lt; 　　 &lt;优先级较高的进程</span><br><span class="line">      SN     N优先级较低的进程</span><br><span class="line">      R+      +表示是前台的进程组</span><br><span class="line">      Sl     以线程的方式运行    </span><br><span class="line">START:     进程的启动时间</span><br><span class="line">TIME：     进程占用CPU的总时间</span><br><span class="line">COMMAND：  进程文件，进程名</span><br><span class="line"></span><br><span class="line">[root@docker-01 ~]# ps -ef|head  ##是用标准的格式显示进程</span><br><span class="line">UID        PID  PPID  C STIME TTY          TIME CMD</span><br><span class="line">root         1     0  0 11月01 ?      00:00:09 /usr/lib/systemd/systemd --switched-root --system --deserialize 22</span><br><span class="line">root         2     0  0 11月01 ?      00:00:00 [kthreadd]</span><br><span class="line">root         3     2  0 11月01 ?      00:00:00 [ksoftirqd/0]</span><br><span class="line">root         5     2  0 11月01 ?      00:00:00 [kworker/0:0H]</span><br><span class="line">root         6     2  0 11月01 ?      00:00:00 [kworker/u8:0]</span><br><span class="line">root         7     2  0 11月01 ?      00:00:00 [migration/0]</span><br><span class="line">root         8     2  0 11月01 ?      00:00:00 [rcu_bh]</span><br><span class="line">root         9     2  0 11月01 ?      00:00:12 [rcu_sched]</span><br><span class="line">root        10     2  0 11月01 ?      00:00:00 [lru-add-drain]</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#包含的信息如下</span></span></span><br><span class="line">UID: 启动这些进程的用户</span><br><span class="line">PID: 进程的ID</span><br><span class="line">PPID: 父进程的进程号</span><br><span class="line">C: 进程生命周期中的CPU利用率</span><br><span class="line">STIME: 进程启动时的系统时间</span><br><span class="line">TTY: 表明进程在哪个终端设备上运行。如果显示  ?表示与终端无关，这种进程一般是内核态进程。另外， tty1-tty6 是本机上面的登入者程序，若为 pts/0 等，则表示运行在虚拟终端上的进程。</span><br><span class="line">TIME: 运行进程一共累计占用的CPU时间</span><br><span class="line">CMD: 启动的程序名称</span><br></pre></td></tr></table></figure><p><img src="640-1.png" alt="Centos7-系统进程管理"></p><p><img src="640-2.jpeg" alt="Centos7-系统进程管理"></p><h3 id="对进程的指定列进行排序"><a href="#对进程的指定列进行排序" class="headerlink" title="对进程的指定列进行排序"></a>对进程的指定列进行排序</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@docker-01 ~]# ps aux --sort %cpu |less  ##升序排序</span><br><span class="line">[root@docker-01 ~]# ps aux --sort -%cpu |less  ##降序排序</span><br><span class="line">[root@docker-01 ~]# ps aux --sort rss |less</span><br><span class="line">[root@docker-01 ~]# ps aux --sort -rss |less</span><br></pre></td></tr></table></figure><h3 id="不可中断状态"><a href="#不可中断状态" class="headerlink" title="不可中断状态"></a>不可中断状态</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@docker-01 ~]# tar -zcvf usr-tar.gz /usr/</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##然后在另一个终端不断查看状态，由S+，R+变为D+</span></span></span><br><span class="line">[root@docker-01 ~]# ps -axu|grep tar</span><br><span class="line">root     25426  3.8  0.0 123688  1552 pts/0    R+   10:31   0:01 tar -zcvf usr-tar.gz /usr/</span><br><span class="line">root     25447  0.0  0.0 112724   984 pts/1    S+   10:31   0:00 grep --color=auto tar</span><br><span class="line">root     25426  3.8  0.0 123688  1552 pts/0    D+   10:31   0:01 tar -zcvf usr-tar.gz /usr/</span><br><span class="line">root     25447  0.0  0.0 112724   984 pts/1    S+   10:31   0:00 grep --color=auto tar</span><br></pre></td></tr></table></figure><h2 id="找出系统中使用CPU最多的进程"><a href="#找出系统中使用CPU最多的进程" class="headerlink" title="找出系统中使用CPU最多的进程"></a>找出系统中使用CPU最多的进程</h2><h3 id="运行top，-找出使用CPU最多的进程，按大写的P，可以按CPU使用率来排序显示"><a href="#运行top，-找出使用CPU最多的进程，按大写的P，可以按CPU使用率来排序显示" class="headerlink" title="运行top， 找出使用CPU最多的进程，按大写的P，可以按CPU使用率来排序显示"></a>运行top， 找出使用CPU最多的进程，按大写的P，可以按CPU使用率来排序显示</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@docker-01 ~]# top</span><br><span class="line">top - 10:48:16 up 1 day, 18:41,  2 users,  load average: 0.00, 0.04, 0.08</span><br><span class="line">Tasks: 111 total,   2 running, 109 sleeping,   0 stopped,   0 zombie</span><br><span class="line"><span class="meta">%</span><span class="bash">Cpu(s):  0.1 us,  0.1 sy,  0.0 ni, 99.8 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 </span></span><br><span class="line">KiB Mem : 16266520 total, 11269388 free,  2162204 used,  2834928 buff/cache</span><br><span class="line">KiB Swap:  2097148 total,  2097148 free,        0 used. 13687952 avail Mem </span><br><span class="line"></span><br><span class="line">  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND  </span><br><span class="line">17427 kibana    20   0 2515164   1.3g  10324 S   0.7  8.3   9:05.29 node     </span><br><span class="line">17255 elastic+  20   0 4713976 308280  15708 S   0.3  1.9  11:09.30 java</span><br></pre></td></tr></table></figure><h3 id="在linux系统中一个进程，最多可以使用100-cpu对吗？"><a href="#在linux系统中一个进程，最多可以使用100-cpu对吗？" class="headerlink" title="在linux系统中一个进程，最多可以使用100%cpu对吗？"></a>在linux系统中一个进程，最多可以使用100%cpu对吗？</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# top</span><br><span class="line">top - 10:51:24 up 61 days, 23:00,  2 users,  load average: 46.56, 48.38, 34.85</span><br><span class="line">Tasks: 267 total,   1 running, 266 sleeping,   0 stopped,   0 zombie</span><br><span class="line">Cpu(s): 96.9%us,  1.6%sy,  0.0%ni,  0.3%id,  0.0%wa,  0.5%hi,  0.5%si,  0.2%st</span><br><span class="line">Mem:  71545156k total, 71079896k used,   465260k free,    58836k buffers</span><br><span class="line">Swap:  2097148k total,        0k used,  2097148k free, 18012268k cached</span><br><span class="line"></span><br><span class="line">  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND           </span><br><span class="line">13073 smgadmin  20   0 5451m 1.4g  21m S 130.5  2.0 184:57.92 java              </span><br><span class="line">30753 smgadmin  20   0 4801m 1.3g  21m S 92.7  2.0  20:14.24 java    </span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#可以看到java（脏牛漏洞，用于提权） 进程使用130.5%</span></span></span><br></pre></td></tr></table></figure><p><strong>注</strong></p><p>如果你的4核心的cpu，你可以运行400%</p><h2 id="Isof查看进程打开的文件，打开文件的进程，进程打开的端口-TCP、UDP"><a href="#Isof查看进程打开的文件，打开文件的进程，进程打开的端口-TCP、UDP" class="headerlink" title="Isof查看进程打开的文件，打开文件的进程，进程打开的端口(TCP、UDP)"></a>Isof查看进程打开的文件，打开文件的进程，进程打开的端口(TCP、UDP)</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@docker-01 ~]# yum install lsof </span><br><span class="line">[root@docker-01 ~]# vim a.txt</span><br><span class="line">[root@docker-01 ~]# ps -axu | grep a.txt</span><br><span class="line">root     25526  0.0  0.0 151532  5200 pts/0    S+   10:55   0:00 vim a.txt</span><br><span class="line">root     25560  0.0  0.0 112724  1004 pts/1    S+   10:57   0:00 grep --color=auto a.txt</span><br><span class="line">[root@docker-01 ~]# lsof -p 25526  ##一般用于查看木马进程，在读哪些文件</span><br><span class="line">[root@docker-01 ~]# lsof -i :22  ##用于查看端口，或查看黑客开启的后门端口是哪个进程在使用</span><br></pre></td></tr></table></figure><h2 id="进程优先级nice"><a href="#进程优先级nice" class="headerlink" title="进程优先级nice"></a>进程优先级nice</h2><h3 id="进程调度及多任务"><a href="#进程调度及多任务" class="headerlink" title="进程调度及多任务"></a>进程调度及多任务</h3><p>每个CPU（或CPU核心）在一个时间点上只能处理一个进程，通过时间片技术，Linux实际能够运行的进程（和线程数）可以超<br>出实际可用的CPU及核心数量。Linux内核<strong>进程调度程序</strong>将多个进程在CPU核心上快速切换，从而给用户多个进程在同时运行的印象。</p><h3 id="相对优先级-nice"><a href="#相对优先级-nice" class="headerlink" title="相对优先级 nice"></a>相对优先级 nice</h3><p>由于不是每个进程都与其他进程同样重要，可告知<strong>进程调度程序</strong>为不同的进程使用不同的<strong>调度策略</strong>。常规系统上运行的大多<br>数进程所使用的调度策略为 <strong>SCHED_OTHER</strong> (也称为SCHED_NORMAL)，但还有其它一些调度策略用于不同的目的。</p><p>SCHED_OTHER 调度策略运行的进程的<strong>相对优先级</strong>称为进程的 nice 值，可以有40种不同级别的nice值。</p><p><img src="641.png" alt="Centos7-系统进程管理"></p><p><strong>nice 值越高： 表示优先级越低，例如+19，该进程容易将CPU 使用量让给其他进程。</strong><br><strong>nice 值越低： 表示优先级越高，例如-20，该进程更不倾向于让出CPU。</strong></p><h3 id="nice启动级别的设置"><a href="#nice启动级别的设置" class="headerlink" title="nice启动级别的设置"></a>nice启动级别的设置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#启动进程时，通常会继承父进程的 nice级别，默认为0。</span></span></span><br><span class="line">[root@docker-01 ~]# sleep 6000 &amp; </span><br><span class="line">[1] 25601</span><br><span class="line">[root@docker-01 ~]# ps axo command,pid,nice |grep sleep</span><br><span class="line">sleep 6000                  25601   0</span><br><span class="line">grep --color=auto sleep     25603   0</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#指定启动级别为5</span></span></span><br><span class="line">[root@docker-01 ~]# nice -n 5 sleep 6000 &amp; </span><br><span class="line">[2] 25605</span><br><span class="line">[1]   已杀死               sleep 6000</span><br><span class="line">[root@docker-01 ~]# ps axo command,pid,nice |grep sleep</span><br><span class="line">sleep 6000                  25605   5</span><br><span class="line">grep --color=auto sleep     25607   0</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#更改现有进程的nice级别</span></span></span><br><span class="line">25605 (进程 ID) 旧优先级为 5，新优先级为 -15</span><br><span class="line">[root@docker-01 ~]# ps axo command,pid,nice |grep sleep</span><br><span class="line">sleep 6000                  25605 -15</span><br><span class="line">grep --color=auto sleep     25611   0</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux_application </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux_application </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
